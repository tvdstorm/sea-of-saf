/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FighterGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  STATIC = false;
               
               
}

PARSER_BEGIN(FighterGrammar)

public class FighterGrammar/*@bgen(jjtree)*/implements FighterGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTFighterGrammarState jjtree = new JJTFighterGrammarState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    FighterGrammar parser = new FighterGrammar(System.in);

    if (args.length == 0) {
      System.out.println("Fighter Parser New Version 1.0.2:  Reading from standard input . . .");
      parser = new FighterGrammar(System.in);
    } else if (args.length == 1) {
      System.out.println("Fighter Parser New Version 1.0.2:  Reading from file " + args[0] + " . . .");
      try {
        parser = new FighterGrammar(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fighter Parser New Version 1.0.2:  File " + args[0] + " not found.");
        return; 
      }
    } else {
      System.out.println("Fighter Parser New Version 1.0.2:  Usage is one of:");
      System.out.println("         java FighterParserNew < inputfile");
      System.out.println("OR");
      System.out.println("         java FighterParserNew inputfile");
      return;
    }
    try {
  		SimpleNode sn = parser.parseFighterBasics();
		FighterVisitor fv = new FighterVisitor();
		sn.jjtAccept(fv, null);
      
    } catch (ParseException e) {
      System.out.println("Encountered errors during while parsing this fighter." + e.getMessage());
    } catch (TokenMgrError tm){
      System.out.println("Encountered errors during while parsing this fighter." + tm.getMessage());
    }
      
  }

}

PARSER_END(FighterGrammar)
//Skip all whitelines / tokens for now
SKIP : 
{ 
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Basic types */
{
  	<  	ASSIGNMENT   		: "=" >
|   <   NUMBER			 	: (< DIGIT >)+ > 
| 	< 	CHOOSE 				: "choose" >
| 	<   OR					: "or" >
|  	< 	AND					: "and" >
|   < 	IDENTIFIER		 	: (< CHARACTER >)+ >
| 	< 	STARTBRACE			: "{" >
| 	< 	ENDBRACE			: "}" >
| 	< 	LIST_OPEN			: "[" > 
| 	<	LIST_CLOSE			: "]" >
| 	<  #DIGIT 				: [ "0" - "9" ] > 
| 	<  #CHARACTER 			: [ "a"-"z", "A" - "Z", "_"] >

}
 
SimpleNode parseFighterBasics()             : 
{/*@bgen(jjtree) FighterNode */
  ASTFighterNode jjtn000 = new ASTFighterNode(JJTFIGHTERNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) FighterNode */
   try {
/*@egen*/ 
   parseFighterStructure()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/   {		return jjtn000;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void parseFighterStructure()          :
{/*@bgen(jjtree) Fighter */
  ASTFighter jjtn000 = new ASTFighter(JJTFIGHTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Fighter */
   try {
/*@egen*/
   Identifier()
   < STARTBRACE >
 		fighterOptions()
   		(
   		  fighterOptions()
   		)*
   < ENDBRACE >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void fighterOptions()      :
{
}
{
  LOOKAHEAD(2) //Required because both start with an identifier
  fighterPersonalityRule() | fighterCharacteristicsRule()
}

void fighterPersonalityRule()                     :
{/*@bgen(jjtree) FighterPersonality */
  ASTFighterPersonality jjtn000 = new ASTFighterPersonality(JJTFIGHTERPERSONALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FighterPersonality */
        try {
/*@egen*/
  	Identifier()
  	Assignment()
  	CharacteristicValue()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fighterCharacteristicsRule()                        :
{/*@bgen(jjtree) FighterCharactaristic */
  ASTFighterCharactaristic jjtn000 = new ASTFighterCharactaristic(JJTFIGHTERCHARACTARISTIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FighterCharactaristic */
        try {
/*@egen*/
	Identifier() // Todo: conditionType() 
	< LIST_OPEN >
	actionType()
	actionType()
	< LIST_CLOSE >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//void conditionType() :
//{
//}
//{
//  	Identifier() < AND > Identifier() | Identifier() < OR > Identifier() | Identifier()
//}

void actionType()       :
{}
{
 	< CHOOSE > "(" Identifier() Identifier() ")" | Identifier()
}
 
void Identifier():
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/ 
	< IDENTIFIER >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Assignment():{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/	< ASSIGNMENT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CharacteristicValue()         :			
{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
  	< NUMBER >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}