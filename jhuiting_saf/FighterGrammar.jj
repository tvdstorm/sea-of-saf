/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FighterGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  STATIC = false;
               
} 

PARSER_BEGIN(FighterGrammar)

import ast.*; 
import visitor.*;

public class FighterGrammar/*@bgen(jjtree)*/implements FighterGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTFighterGrammarState jjtree = new JJTFighterGrammarState();

/*@egen*/
  public static void main(String args []) throws ParseException
  { 
    FighterGrammar parser = new FighterGrammar(System.in);

    if (args.length == 0) {
      System.out.println("Fighter Parser New Version 1.0.2:  Reading from standard input . . .");
      parser = new FighterGrammar(System.in);
    } else if (args.length == 1) {
      System.out.println("Fighter Parser New Version 1.0.2:  Reading from file " + args[0] + " . . .");
      try { 
        parser = new FighterGrammar(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fighter Parser New Version 1.0.2:  File " + args[0] + " not found.");
        return; 
      }
    } else {
      System.out.println("Fighter Parser New Version 1.0.2:  Usage is one of:");
      System.out.println("         java FighterParserNew < inputfile");
      System.out.println("OR");
      System.out.println("         java FighterParserNew inputfile");
      return;
    }
    try {
  		FighterTree f = parser.parseFighter();
  		f.accept(new FighterChecker());
      
    } catch (ParseException e) {
      System.out.println("Encountered errors during while parsing this " + e.getMessage());
    } catch (TokenMgrError tm){
      System.out.println("Encountered errors during while parsing this " + tm.getMessage());
    }
      
  }

}

PARSER_END(FighterGrammar)
//Skip all whitelines / tokens for now
SKIP : 
{  
  " " 
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Basic types */
{
  	<  	ASSIGNMENT   		: "=" >
|   <   NUMBER			 	: (< DIGIT >)+ > 
| 	< 	CHOOSE 				: "choose" >
| 	<   OR					: "or" >
|  	< 	AND					: "and" >
|   < 	IDENTIFIER		 	: (< CHARACTER >)+ >
| 	< 	STARTBRACE			: "{" >
| 	< 	ENDBRACE			: "}" >
| 	< 	LIST_OPEN			: "[" > 
| 	<	LIST_CLOSE			: "]" >
| 	<  #DIGIT 				: [ "0" - "9" ] > 
| 	<  #CHARACTER 			: [ "a"-"z", "A" - "Z", "_"] >
}

FighterTree parseFighter() : 
{/*@bgen(jjtree) parseFighter */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEFIGHTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ 
  Elements e; 
}{/*@bgen(jjtree) parseFighter */
   try {
/*@egen*/  
   e=parseFighterStructure()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/    {		return new FighterTree(e); 
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Elements parseFighterStructure() :
{/*@bgen(jjtree) parseFighterStructure */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSEFIGHTERSTRUCTURE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Elements fe = new Elements();
  	FighterNode fn;
}
{/*@bgen(jjtree) parseFighterStructure */
   try {
/*@egen*/
   Identifier()
   < STARTBRACE >
   		(
   		  fn = fighterOptions()
   		  {			fe.addElement(fn); 
   		  }
   		)*
   		{			return fe;
   		} 
   < ENDBRACE >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

FighterNode fighterOptions():
{/*@bgen(jjtree) fighterOptions */
        SimpleNode jjtn000 = new SimpleNode(JJTFIGHTEROPTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/ 
  	FighterNode n;
} 
{/*@bgen(jjtree) fighterOptions */
  try {
/*@egen*/
  LOOKAHEAD(2) //Required because both start with an identifier  n = fighterPersonalityRule()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {	return n;  }   |  n = fighterBehaviourRule()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {    return n;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

FighterNode fighterPersonalityRule() :
{/*@bgen(jjtree) fighterPersonalityRule */
        SimpleNode jjtn000 = new SimpleNode(JJTFIGHTERPERSONALITYRULE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Identifier i1; 
  	Identifier i2;
}
{/*@bgen(jjtree) fighterPersonalityRule */
        try {
/*@egen*/
  	(	  	i1 = Identifier()
		Assignment()
		i2 = BehaviourRuleValue()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/  	{  
	  	return ((FighterNode) new Personality(i1, i2));	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

FighterNode fighterBehaviourRule() :
{/*@bgen(jjtree) fighterBehaviourRule */
        SimpleNode jjtn000 = new SimpleNode(JJTFIGHTERBEHAVIOURRULE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Identifier cond;
  	Identifier fg;
  	Identifier mv;
  	Action fight;
  	Action move;
}
{/*@bgen(jjtree) fighterBehaviourRule */
        try {
/*@egen*/
	cond = Identifier() // Todo: conditionType() 
	< LIST_OPEN > 
	fg = actionType() { 		fight = new Action("fight", fg.getValue());
	}
	mv = actionType() {
		move = new Action("move", mv.getValue());
	}
	< LIST_CLOSE >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/	{		return (FighterNode) new BehaviourRule(cond, move, fight);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	  
}

//void conditionType() :
//{
//}
//{
//  	Identifier() < AND > Identifier() | Identifier() < OR > Identifier() | Identifier()
//}

Identifier actionType():
{/*@bgen(jjtree) actionType */
        SimpleNode jjtn000 = new SimpleNode(JJTACTIONTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Identifier i; 
}
{/*@bgen(jjtree) actionType */
         try {
/*@egen*/
 	 < CHOOSE > "(" Identifier() Identifier() ")" //@TODO 	|
 	i = Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 	{
 	  return i;	}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
 	  
 	
}
 
Identifier Identifier():
{/*@bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/ 
	( t = < IDENTIFIER >)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{	return new Identifier(t.image);	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Assignment():{/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	< ASSIGNMENT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Identifier BehaviourRuleValue() :			
{/*@bgen(jjtree) BehaviourRuleValue */
        SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIOURRULEVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token t;}
{/*@bgen(jjtree) BehaviourRuleValue */
        try {
/*@egen*/
  	(  	  t  = < NUMBER >)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
  	  {		return new Identifier(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	}