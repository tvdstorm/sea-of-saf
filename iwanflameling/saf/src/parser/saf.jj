/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}
PARSER_BEGIN(SAFParser)package parser;

import ast.object.Fighter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Set;

public class SAFParser{  public static void main(String args []) throws ParseException  {
    FileReader input = initFile();
    SAFParser parser = null;
    boolean useSystemIn = !initSAFParser(parser, input);    launchSAFParser(useSystemIn, parser);  }
  
  private static void launchSAFParser(boolean useSystemIn, SAFParser parser){
    if(useSystemIn){
        while (true)
        {
          System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
          try{
           startParser(parser, true);
          } catch(Error e){
           System.out.println(e);
           break;
          }
        }
    } else{
        try{
            startParser(parser, false);
        } catch(Error e){
            System.out.println(e);
            }
    }
  }
  
  private static boolean initSAFParser(SAFParser parser, FileReader input){
    boolean result = false;
    if(input != null){
        parser = new SAFParser(input);
        result = true;
    } else {
        System.out.println("Defaulting to console-input");
        parser = new SAFParser(System.in);
        result = false;
    }
    return result;
  }
  
  private static FileReader initFile(){
    FileReader input;
    boolean useSystemIn = false;
    try{
        input = new FileReader("input.txt");
        System.out.println("input-file found, using it.");
    } catch(FileNotFoundException e) {
        System.out.println("input-file not found: " + e);
        input = null;
    }
    return input;
  }
  
  private static void startParser(SAFParser parser, boolean useSystemIn) throws Error{
      try
      {
        Fighter fighter = getFighter();
        System.out.println(fighter);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        if(useSystemIn) parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        throw e;
      }
  }
  }PARSER_END(SAFParser)SKIP :{  " "| "\r"| "\t"| "\n"}

TOKEN: /* operators */
{
    < AND : "and" >
|   < OR : "or" >
|   < CHOOSE : "choose" >
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < ID : (["a"-"z", "A" - "Z", "0"-"9", "_"])+ >


/*
| < FIGHTER : < ID > "{" <FIGHTER_PROPS> "}" >
| < #FIGHTER_PROPS : (<FIGHTER_PROP>)* >
| < FIGHTER_PROP : <FIGHT_CHAR> >
| < #FIGHT_POWER : <DIGIT> >//(<DIGIT>~["0"]) | ("1""0") >
| < FIGHT_CHAR : <FIGHT_ID> "=" <FIGHT_POWER> >
| < FIGHT_ID : <KICKPOWER> | <PUNCHPOWER> | <KICKREACH> | <PUNCHREACH> >
| < #KICKPOWER : "kickPower" >
| < #PUNCHPOWER : "punchPower" >
| < #KICKREACH : "kickReach" >
| < #PUNCHREACH : "punchReach" >
*/}

Fighter getFighter():
{
    Token t;
}
{  t = <ID>  {
    Set fighterProps = fighterProps();
    Fighter fighter = new Fighter(t.image);
    return fighter;  }
}

void fighter():
{}
{
    <ID> fighterProps()
}

Set fighterProps():
{}
{
    "{"(fighterProp())*"}"
    {return null;}
}

void fighterProp():
{}
{
    LOOKAHEAD(2)
    (fightId() "=" fightPower())
    |
    (condition()"["action()"]")
}

void condition():
{}
{   
    LOOKAHEAD(2)
    (<ID> <AND> condition())
    |
    LOOKAHEAD(2)
    (<ID> <OR> condition())
    |
    <ID>
}

void action():
{}
{

    (LOOKAHEAD(2) choose() | moveAction())
    (LOOKAHEAD(2) choose() | fightAction())
    
}

void choose():
{}
{
    <CHOOSE> "(" (LOOKAHEAD(2)moveAction()|fightAction())+ ")"
}

void moveAction():
{}
{
    <ID>
}

void fightAction():
{}
{
    <ID>
}

void fightId():
{}
{
    <ID>
}

void fightPower():
{}
{
    <CONSTANT>
}


String getFighterName():
{
    Token t;
}
{
    t = <ID>
    {return t.image;}
}