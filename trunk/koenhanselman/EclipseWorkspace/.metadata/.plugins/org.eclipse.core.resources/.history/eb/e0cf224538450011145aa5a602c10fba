/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import saf.analysis.*;

@SuppressWarnings("nls")
public final class AProgramFooter extends PProgramFooter
{
    private TNewline _newline_;
    private TCurlybracer _curlybracer_;

    public AProgramFooter()
    {
        // Constructor
    }

    public AProgramFooter(
        @SuppressWarnings("hiding") TNewline _newline_,
        @SuppressWarnings("hiding") TCurlybracer _curlybracer_)
    {
        // Constructor
        setNewline(_newline_);

        setCurlybracer(_curlybracer_);

    }

    @Override
    public Object clone()
    {
        return new AProgramFooter(
            cloneNode(this._newline_),
            cloneNode(this._curlybracer_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramFooter(this);
    }

    public TNewline getNewline()
    {
        return this._newline_;
    }

    public void setNewline(TNewline node)
    {
        if(this._newline_ != null)
        {
            this._newline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newline_ = node;
    }

    public TCurlybracer getCurlybracer()
    {
        return this._curlybracer_;
    }

    public void setCurlybracer(TCurlybracer node)
    {
        if(this._curlybracer_ != null)
        {
            this._curlybracer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlybracer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._newline_)
            + toString(this._curlybracer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._newline_ == child)
        {
            this._newline_ = null;
            return;
        }

        if(this._curlybracer_ == child)
        {
            this._curlybracer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._newline_ == oldChild)
        {
            setNewline((TNewline) newChild);
            return;
        }

        if(this._curlybracer_ == oldChild)
        {
            setCurlybracer((TCurlybracer) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
