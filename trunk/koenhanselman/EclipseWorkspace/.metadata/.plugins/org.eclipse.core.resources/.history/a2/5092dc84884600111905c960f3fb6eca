/* saf.grammar - A grammar the SAF language */ 
Package saf ; 
     
Helpers 
    /* Helpers */
    any_character = [0x0 .. 0xfffff] ;
    nl = (10 | 13)+ ;
    space = ' ' ;
    tab = 9 ;
      
Tokens 
    /* General tokens */
	digit = ['0' .. '9'] ;
    letter = [['a' .. 'z'] + ['A' .. 'Z']] ;
    comment = '//' any_character nl ;
    newline = nl ;
    space = space ;
    blank = (space | tab)+ ;
    left_curly = '{' ;
    right_curly = '}' ;
    left_bracket = '[' ;
    right_bracket = ']' ;
    left_paren = '(' ;
    right_paren = ')' ;
    equals = '=' ;
    
    /* Characteristics */
    punch_reach = 'punchReach' ;
    punch_power = 'punchPower' ;
    kick_reach = 'kickReach' ;
    kick_power = 'kickPower' ;
    
    /* Enum general */
    choose = 'choose' ;
    
    /* Enum MoveActionType */
    walk_towards = 'walk_towards' ;
    walk_away = 'walk_away' ;
    run_towards = 'run_towards' ;
    run_away = 'run_away' ;
    jump = 'jump' ;
    crouch = 'crouch' ;
    stand = 'stand' ;
    
    /* Enum ConditionType */
    always = 'always' ;
    near = 'near' ;
    far = 'far' ;
    much_stronger = 'much_stronger' ;
    stronger = 'stronger' ;
    even = 'even' ;
    weaker = 'weaker' ;
    much_weaker = 'much_weaker' ;
    
    /* Enum FightActionType */
    block_low = 'block_low' ;
    block_high = 'block_high' ;
    punch_low = 'punch_low' ;
    punch_high = 'punch_high' ;
    kick_low = 'kick_low' ;
    kick_high = 'kick_high' ;

Ignored Tokens
	/* Tokens that will be ignored */
	comment,
	blank ;
  
Productions 
    program = program_header program_personality program_behaviour program_footer ;
    program_header = letter+ left_curly ;
    program_footer = newline right_curly ;
    
    program_personality = program_characteristic+ ; 
    program_characteristic = newline letter+ equals digit ;
    
    program_behaviour = program_rule+ ;
    program_rule = newline letter+ left_bracket program_action program_action right_bracket ;
    
    program_move_action = letter+ left_paren letter+ (letter+ | space)* right_paren | letter+ ;
    program_fight_action = {single_fight_action} fight_action_type | {choose_fight_action} choose parenthesisl fight_action_type+ parenthesisr ;
    
    move_action_type = {walk_towards} walk_towards
    				 | {walk_away} walk_away
    				 | {run_towards} run_towards
    				 | {run_away} run_away
    				 | {jump} jump
    				 | {crouch} crouch
    				 | {stand} stand ;
    				 
	fight_action_type = {block_low} block_low
    				  | {block_high} block_high
    				  | {punch_low} punch_low
    				  | {punch_high} punch_high
    				  | {kick_low} kick_low
    				  | {kick_high} kick_high ;
    
    condition_type = {always} always
    			   | {near} near
    			   | {far} far
    			   | {much_stronger} much_stronger
    			   | {stronger} stronger
    			   | {even} even
    			   | {weaker} weaker
    			   | {much_weaker} much_weaker ;
    			   
Abstract Syntax Tree
	program {-> p} = 
    {add} [left]:expr add [right]:factor  {-> New expr.add(left.expr, right.expr)}
  | {sub} [left]:expr sub [right]:factor  {-> New expr.sub(left.expr, right.expr)} ;