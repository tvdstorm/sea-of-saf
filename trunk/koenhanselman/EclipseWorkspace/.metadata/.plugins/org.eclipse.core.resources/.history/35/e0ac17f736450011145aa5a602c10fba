/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class AProgramHeader extends PProgramHeader
{
    private final LinkedList<TLetter> _letter_ = new LinkedList<TLetter>();
    private TCurlybracel _curlybracel_;

    public AProgramHeader()
    {
        // Constructor
    }

    public AProgramHeader(
        @SuppressWarnings("hiding") List<TLetter> _letter_,
        @SuppressWarnings("hiding") TCurlybracel _curlybracel_)
    {
        // Constructor
        setLetter(_letter_);

        setCurlybracel(_curlybracel_);

    }

    @Override
    public Object clone()
    {
        return new AProgramHeader(
            cloneList(this._letter_),
            cloneNode(this._curlybracel_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramHeader(this);
    }

    public LinkedList<TLetter> getLetter()
    {
        return this._letter_;
    }

    public void setLetter(List<TLetter> list)
    {
        this._letter_.clear();
        this._letter_.addAll(list);
        for(TLetter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TCurlybracel getCurlybracel()
    {
        return this._curlybracel_;
    }

    public void setCurlybracel(TCurlybracel node)
    {
        if(this._curlybracel_ != null)
        {
            this._curlybracel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlybracel_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._letter_)
            + toString(this._curlybracel_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._letter_.remove(child))
        {
            return;
        }

        if(this._curlybracel_ == child)
        {
            this._curlybracel_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TLetter> i = this._letter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TLetter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._curlybracel_ == oldChild)
        {
            setCurlybracel((TCurlybracel) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
