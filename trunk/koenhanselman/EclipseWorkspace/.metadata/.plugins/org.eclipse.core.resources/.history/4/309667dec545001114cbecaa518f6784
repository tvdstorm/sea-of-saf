/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.parser;

import saf.lexer.*;
import saf.node.*;
import saf.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogramheader1ProgramHeader */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAprogramheader2ProgramHeader */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAprogramfooter1ProgramFooter */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAprogramfooter2ProgramFooter */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AProgramPersonality */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce APunchReachProgramCharacteristic */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce APunchPowerProgramCharacteristic */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AKickReachProgramCharacteristic */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AKickPowerProgramCharacteristic */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AProgramPunchReach */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AProgramPunchPower */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AProgramKickReach */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AProgramKickPower */
		    {
			ArrayList list = new13();
			push(goTo(8), list, false);
		    }
		    break;
                    case 14: /* reduce AProgramBehaviour */
		    {
			ArrayList list = new14();
			push(goTo(9), list, false);
		    }
		    break;
                    case 15: /* reduce AProgramRule */
		    {
			ArrayList list = new15();
			push(goTo(10), list, false);
		    }
		    break;
                    case 16: /* reduce ASingleMoveActionProgramMoveAction */
		    {
			ArrayList list = new16();
			push(goTo(11), list, false);
		    }
		    break;
                    case 17: /* reduce AChooseMoveActionProgramMoveAction */
		    {
			ArrayList list = new17();
			push(goTo(11), list, false);
		    }
		    break;
                    case 18: /* reduce ASingleFightActionProgramFightAction */
		    {
			ArrayList list = new18();
			push(goTo(12), list, false);
		    }
		    break;
                    case 19: /* reduce AChooseFightActionProgramFightAction */
		    {
			ArrayList list = new19();
			push(goTo(12), list, false);
		    }
		    break;
                    case 20: /* reduce AWalkTowardsMoveActionType */
		    {
			ArrayList list = new20();
			push(goTo(13), list, false);
		    }
		    break;
                    case 21: /* reduce AWalkAwayMoveActionType */
		    {
			ArrayList list = new21();
			push(goTo(13), list, false);
		    }
		    break;
                    case 22: /* reduce ARunTowardsMoveActionType */
		    {
			ArrayList list = new22();
			push(goTo(13), list, false);
		    }
		    break;
                    case 23: /* reduce ARunAwayMoveActionType */
		    {
			ArrayList list = new23();
			push(goTo(13), list, false);
		    }
		    break;
                    case 24: /* reduce AJumpMoveActionType */
		    {
			ArrayList list = new24();
			push(goTo(13), list, false);
		    }
		    break;
                    case 25: /* reduce ACrouchMoveActionType */
		    {
			ArrayList list = new25();
			push(goTo(13), list, false);
		    }
		    break;
                    case 26: /* reduce AStandMoveActionType */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce ABlockLowFightActionType */
		    {
			ArrayList list = new27();
			push(goTo(14), list, false);
		    }
		    break;
                    case 28: /* reduce ABlockHighFightActionType */
		    {
			ArrayList list = new28();
			push(goTo(14), list, false);
		    }
		    break;
                    case 29: /* reduce APunchLowFightActionType */
		    {
			ArrayList list = new29();
			push(goTo(14), list, false);
		    }
		    break;
                    case 30: /* reduce APunchHighFightActionType */
		    {
			ArrayList list = new30();
			push(goTo(14), list, false);
		    }
		    break;
                    case 31: /* reduce AKickLowFightActionType */
		    {
			ArrayList list = new31();
			push(goTo(14), list, false);
		    }
		    break;
                    case 32: /* reduce AKickHighFightActionType */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce AAlwaysConditionType */
		    {
			ArrayList list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce ANearConditionType */
		    {
			ArrayList list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce AFarConditionType */
		    {
			ArrayList list = new35();
			push(goTo(15), list, false);
		    }
		    break;
                    case 36: /* reduce AMuchStrongerConditionType */
		    {
			ArrayList list = new36();
			push(goTo(15), list, false);
		    }
		    break;
                    case 37: /* reduce AStrongerConditionType */
		    {
			ArrayList list = new37();
			push(goTo(15), list, false);
		    }
		    break;
                    case 38: /* reduce AEvenConditionType */
		    {
			ArrayList list = new38();
			push(goTo(15), list, false);
		    }
		    break;
                    case 39: /* reduce AWeakerConditionType */
		    {
			ArrayList list = new39();
			push(goTo(15), list, false);
		    }
		    break;
                    case 40: /* reduce AMuchWeakerConditionType */
		    {
			ArrayList list = new40();
			push(goTo(15), list, false);
		    }
		    break;
                    case 41: /* reduce ATerminal$Letter */
		    {
			ArrayList list = new41();
			push(goTo(16), list, true);
		    }
		    break;
                    case 42: /* reduce ANonTerminal$Letter */
		    {
			ArrayList list = new42();
			push(goTo(16), list, true);
		    }
		    break;
                    case 43: /* reduce ATerminal$ProgramCharacteristic */
		    {
			ArrayList list = new43();
			push(goTo(17), list, true);
		    }
		    break;
                    case 44: /* reduce ANonTerminal$ProgramCharacteristic */
		    {
			ArrayList list = new44();
			push(goTo(17), list, true);
		    }
		    break;
                    case 45: /* reduce ATerminal$ProgramRule */
		    {
			ArrayList list = new45();
			push(goTo(18), list, true);
		    }
		    break;
                    case 46: /* reduce ANonTerminal$ProgramRule */
		    {
			ArrayList list = new46();
			push(goTo(18), list, true);
		    }
		    break;
                    case 47: /* reduce ATerminal$MoveActionType */
		    {
			ArrayList list = new47();
			push(goTo(19), list, true);
		    }
		    break;
                    case 48: /* reduce ANonTerminal$MoveActionType */
		    {
			ArrayList list = new48();
			push(goTo(19), list, true);
		    }
		    break;
                    case 49: /* reduce ATerminal$FightActionType */
		    {
			ArrayList list = new49();
			push(goTo(20), list, true);
		    }
		    break;
                    case 50: /* reduce ANonTerminal$FightActionType */
		    {
			ArrayList list = new50();
			push(goTo(20), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PProgramHeader pprogramheaderNode2;
        PProgramPersonality pprogrampersonalityNode3;
        PProgramBehaviour pprogrambehaviourNode4;
        PProgramFooter pprogramfooterNode5;
        pprogramheaderNode2 = (PProgramHeader)nodeArrayList1.get(0);
        pprogrampersonalityNode3 = (PProgramPersonality)nodeArrayList2.get(0);
        pprogrambehaviourNode4 = (PProgramBehaviour)nodeArrayList3.get(0);
        pprogramfooterNode5 = (PProgramFooter)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(pprogramheaderNode2, pprogrampersonalityNode3, pprogrambehaviourNode4, pprogramfooterNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogramheader1ProgramHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramHeader pprogramheaderNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        TCurlybracel tcurlybracelNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tcurlybracelNode4 = (TCurlybracel)nodeArrayList2.get(0);

        pprogramheaderNode1 = new AProgramHeader(listNode3, tcurlybracelNode4, null);
        }
	nodeList.add(pprogramheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAprogramheader2ProgramHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramHeader pprogramheaderNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        TCurlybracel tcurlybracelNode4;
        TNewline tnewlineNode5;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tcurlybracelNode4 = (TCurlybracel)nodeArrayList2.get(0);
        tnewlineNode5 = (TNewline)nodeArrayList3.get(0);

        pprogramheaderNode1 = new AProgramHeader(listNode3, tcurlybracelNode4, tnewlineNode5);
        }
	nodeList.add(pprogramheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAprogramfooter1ProgramFooter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramFooter pprogramfooterNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TCurlybracer tcurlybracerNode3;
        tcurlybracerNode3 = (TCurlybracer)nodeArrayList1.get(0);

        pprogramfooterNode1 = new AProgramFooter(null, tcurlybracerNode3);
        }
	nodeList.add(pprogramfooterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAprogramfooter2ProgramFooter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramFooter pprogramfooterNode1;
        {
            // Block
        TNewline tnewlineNode2;
        TCurlybracer tcurlybracerNode3;
        tnewlineNode2 = (TNewline)nodeArrayList1.get(0);
        tcurlybracerNode3 = (TCurlybracer)nodeArrayList2.get(0);

        pprogramfooterNode1 = new AProgramFooter(tnewlineNode2, tcurlybracerNode3);
        }
	nodeList.add(pprogramfooterNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AProgramPersonality */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramPersonality pprogrampersonalityNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogrampersonalityNode1 = new AProgramPersonality(listNode3);
        }
	nodeList.add(pprogrampersonalityNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce APunchReachProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramCharacteristic pprogramcharacteristicNode1;
        {
            // Block
        PProgramPunchReach pprogrampunchreachNode2;
        pprogrampunchreachNode2 = (PProgramPunchReach)nodeArrayList1.get(0);

        pprogramcharacteristicNode1 = new APunchReachProgramCharacteristic(pprogrampunchreachNode2);
        }
	nodeList.add(pprogramcharacteristicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce APunchPowerProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramCharacteristic pprogramcharacteristicNode1;
        {
            // Block
        PProgramPunchPower pprogrampunchpowerNode2;
        pprogrampunchpowerNode2 = (PProgramPunchPower)nodeArrayList1.get(0);

        pprogramcharacteristicNode1 = new APunchPowerProgramCharacteristic(pprogrampunchpowerNode2);
        }
	nodeList.add(pprogramcharacteristicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AKickReachProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramCharacteristic pprogramcharacteristicNode1;
        {
            // Block
        PProgramKickReach pprogramkickreachNode2;
        pprogramkickreachNode2 = (PProgramKickReach)nodeArrayList1.get(0);

        pprogramcharacteristicNode1 = new AKickReachProgramCharacteristic(pprogramkickreachNode2);
        }
	nodeList.add(pprogramcharacteristicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AKickPowerProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramCharacteristic pprogramcharacteristicNode1;
        {
            // Block
        PProgramKickPower pprogramkickpowerNode2;
        pprogramkickpowerNode2 = (PProgramKickPower)nodeArrayList1.get(0);

        pprogramcharacteristicNode1 = new AKickPowerProgramCharacteristic(pprogramkickpowerNode2);
        }
	nodeList.add(pprogramcharacteristicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AProgramPunchReach */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramPunchReach pprogrampunchreachNode1;
        {
            // Block
        TPunchReach tpunchreachNode2;
        TEquals tequalsNode3;
        TDigit tdigitNode4;
        TNewline tnewlineNode5;
        tpunchreachNode2 = (TPunchReach)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        tdigitNode4 = (TDigit)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewline)nodeArrayList4.get(0);

        pprogrampunchreachNode1 = new AProgramPunchReach(tpunchreachNode2, tequalsNode3, tdigitNode4, tnewlineNode5);
        }
	nodeList.add(pprogrampunchreachNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AProgramPunchPower */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramPunchPower pprogrampunchpowerNode1;
        {
            // Block
        TPunchPower tpunchpowerNode2;
        TEquals tequalsNode3;
        TDigit tdigitNode4;
        TNewline tnewlineNode5;
        tpunchpowerNode2 = (TPunchPower)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        tdigitNode4 = (TDigit)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewline)nodeArrayList4.get(0);

        pprogrampunchpowerNode1 = new AProgramPunchPower(tpunchpowerNode2, tequalsNode3, tdigitNode4, tnewlineNode5);
        }
	nodeList.add(pprogrampunchpowerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AProgramKickReach */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramKickReach pprogramkickreachNode1;
        {
            // Block
        TKickReach tkickreachNode2;
        TEquals tequalsNode3;
        TDigit tdigitNode4;
        TNewline tnewlineNode5;
        tkickreachNode2 = (TKickReach)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        tdigitNode4 = (TDigit)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewline)nodeArrayList4.get(0);

        pprogramkickreachNode1 = new AProgramKickReach(tkickreachNode2, tequalsNode3, tdigitNode4, tnewlineNode5);
        }
	nodeList.add(pprogramkickreachNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AProgramKickPower */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramKickPower pprogramkickpowerNode1;
        {
            // Block
        TKickPower tkickpowerNode2;
        TEquals tequalsNode3;
        TDigit tdigitNode4;
        TNewline tnewlineNode5;
        tkickpowerNode2 = (TKickPower)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        tdigitNode4 = (TDigit)nodeArrayList3.get(0);
        tnewlineNode5 = (TNewline)nodeArrayList4.get(0);

        pprogramkickpowerNode1 = new AProgramKickPower(tkickpowerNode2, tequalsNode3, tdigitNode4, tnewlineNode5);
        }
	nodeList.add(pprogramkickpowerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AProgramBehaviour */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramBehaviour pprogrambehaviourNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogrambehaviourNode1 = new AProgramBehaviour(listNode3);
        }
	nodeList.add(pprogrambehaviourNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AProgramRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramRule pprogramruleNode1;
        {
            // Block
        PConditionType pconditiontypeNode2;
        TBracketl tbracketlNode3;
        PProgramMoveAction pprogrammoveactionNode4;
        PProgramFightAction pprogramfightactionNode5;
        TBracketr tbracketrNode6;
        TNewline tnewlineNode7;
        pconditiontypeNode2 = (PConditionType)nodeArrayList1.get(0);
        tbracketlNode3 = (TBracketl)nodeArrayList2.get(0);
        pprogrammoveactionNode4 = (PProgramMoveAction)nodeArrayList3.get(0);
        pprogramfightactionNode5 = (PProgramFightAction)nodeArrayList4.get(0);
        tbracketrNode6 = (TBracketr)nodeArrayList5.get(0);
        tnewlineNode7 = (TNewline)nodeArrayList6.get(0);

        pprogramruleNode1 = new AProgramRule(pconditiontypeNode2, tbracketlNode3, pprogrammoveactionNode4, pprogramfightactionNode5, tbracketrNode6, tnewlineNode7);
        }
	nodeList.add(pprogramruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ASingleMoveActionProgramMoveAction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramMoveAction pprogrammoveactionNode1;
        {
            // Block
        PMoveActionType pmoveactiontypeNode2;
        pmoveactiontypeNode2 = (PMoveActionType)nodeArrayList1.get(0);

        pprogrammoveactionNode1 = new ASingleMoveActionProgramMoveAction(pmoveactiontypeNode2);
        }
	nodeList.add(pprogrammoveactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AChooseMoveActionProgramMoveAction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramMoveAction pprogrammoveactionNode1;
        {
            // Block
        TChoose tchooseNode2;
        TParenthesisl tparenthesislNode3;
        LinkedList listNode5 = new LinkedList();
        TParenthesisr tparenthesisrNode6;
        tchooseNode2 = (TChoose)nodeArrayList1.get(0);
        tparenthesislNode3 = (TParenthesisl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tparenthesisrNode6 = (TParenthesisr)nodeArrayList4.get(0);

        pprogrammoveactionNode1 = new AChooseMoveActionProgramMoveAction(tchooseNode2, tparenthesislNode3, listNode5, tparenthesisrNode6);
        }
	nodeList.add(pprogrammoveactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ASingleFightActionProgramFightAction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramFightAction pprogramfightactionNode1;
        {
            // Block
        PFightActionType pfightactiontypeNode2;
        pfightactiontypeNode2 = (PFightActionType)nodeArrayList1.get(0);

        pprogramfightactionNode1 = new ASingleFightActionProgramFightAction(pfightactiontypeNode2);
        }
	nodeList.add(pprogramfightactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AChooseFightActionProgramFightAction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgramFightAction pprogramfightactionNode1;
        {
            // Block
        TChoose tchooseNode2;
        TParenthesisl tparenthesislNode3;
        LinkedList listNode5 = new LinkedList();
        TParenthesisr tparenthesisrNode6;
        tchooseNode2 = (TChoose)nodeArrayList1.get(0);
        tparenthesislNode3 = (TParenthesisl)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tparenthesisrNode6 = (TParenthesisr)nodeArrayList4.get(0);

        pprogramfightactionNode1 = new AChooseFightActionProgramFightAction(tchooseNode2, tparenthesislNode3, listNode5, tparenthesisrNode6);
        }
	nodeList.add(pprogramfightactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AWalkTowardsMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TWalkTowards twalktowardsNode2;
        twalktowardsNode2 = (TWalkTowards)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new AWalkTowardsMoveActionType(twalktowardsNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AWalkAwayMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TWalkAway twalkawayNode2;
        twalkawayNode2 = (TWalkAway)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new AWalkAwayMoveActionType(twalkawayNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ARunTowardsMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TRunTowards truntowardsNode2;
        truntowardsNode2 = (TRunTowards)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new ARunTowardsMoveActionType(truntowardsNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ARunAwayMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TRunAway trunawayNode2;
        trunawayNode2 = (TRunAway)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new ARunAwayMoveActionType(trunawayNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AJumpMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TJump tjumpNode2;
        tjumpNode2 = (TJump)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new AJumpMoveActionType(tjumpNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ACrouchMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TCrouch tcrouchNode2;
        tcrouchNode2 = (TCrouch)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new ACrouchMoveActionType(tcrouchNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AStandMoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoveActionType pmoveactiontypeNode1;
        {
            // Block
        TStand tstandNode2;
        tstandNode2 = (TStand)nodeArrayList1.get(0);

        pmoveactiontypeNode1 = new AStandMoveActionType(tstandNode2);
        }
	nodeList.add(pmoveactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ABlockLowFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TBlockLow tblocklowNode2;
        tblocklowNode2 = (TBlockLow)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new ABlockLowFightActionType(tblocklowNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ABlockHighFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TBlockHigh tblockhighNode2;
        tblockhighNode2 = (TBlockHigh)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new ABlockHighFightActionType(tblockhighNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce APunchLowFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TPunchLow tpunchlowNode2;
        tpunchlowNode2 = (TPunchLow)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new APunchLowFightActionType(tpunchlowNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce APunchHighFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TPunchHigh tpunchhighNode2;
        tpunchhighNode2 = (TPunchHigh)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new APunchHighFightActionType(tpunchhighNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AKickLowFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TKickLow tkicklowNode2;
        tkicklowNode2 = (TKickLow)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new AKickLowFightActionType(tkicklowNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AKickHighFightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFightActionType pfightactiontypeNode1;
        {
            // Block
        TKickHigh tkickhighNode2;
        tkickhighNode2 = (TKickHigh)nodeArrayList1.get(0);

        pfightactiontypeNode1 = new AKickHighFightActionType(tkickhighNode2);
        }
	nodeList.add(pfightactiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAlwaysConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TAlways talwaysNode2;
        talwaysNode2 = (TAlways)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AAlwaysConditionType(talwaysNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANearConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TNear tnearNode2;
        tnearNode2 = (TNear)nodeArrayList1.get(0);

        pconditiontypeNode1 = new ANearConditionType(tnearNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AFarConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TFar tfarNode2;
        tfarNode2 = (TFar)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AFarConditionType(tfarNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AMuchStrongerConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TMuchStronger tmuchstrongerNode2;
        tmuchstrongerNode2 = (TMuchStronger)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AMuchStrongerConditionType(tmuchstrongerNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AStrongerConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TStronger tstrongerNode2;
        tstrongerNode2 = (TStronger)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AStrongerConditionType(tstrongerNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AEvenConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TEven tevenNode2;
        tevenNode2 = (TEven)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AEvenConditionType(tevenNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AWeakerConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TWeaker tweakerNode2;
        tweakerNode2 = (TWeaker)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AWeakerConditionType(tweakerNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AMuchWeakerConditionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConditionType pconditiontypeNode1;
        {
            // Block
        TMuchWeaker tmuchweakerNode2;
        tmuchweakerNode2 = (TMuchWeaker)nodeArrayList1.get(0);

        pconditiontypeNode1 = new AMuchWeakerConditionType(tmuchweakerNode2);
        }
	nodeList.add(pconditiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ATerminal$Letter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TLetter tletterNode1;
        tletterNode1 = (TLetter)nodeArrayList1.get(0);
	if(tletterNode1 != null)
	{
	  listNode2.add(tletterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ANonTerminal$Letter */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TLetter tletterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tletterNode2 = (TLetter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tletterNode2 != null)
	{
	  listNode3.add(tletterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ATerminal$ProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PProgramCharacteristic pprogramcharacteristicNode1;
        pprogramcharacteristicNode1 = (PProgramCharacteristic)nodeArrayList1.get(0);
	if(pprogramcharacteristicNode1 != null)
	{
	  listNode2.add(pprogramcharacteristicNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ANonTerminal$ProgramCharacteristic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PProgramCharacteristic pprogramcharacteristicNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramcharacteristicNode2 = (PProgramCharacteristic)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramcharacteristicNode2 != null)
	{
	  listNode3.add(pprogramcharacteristicNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ATerminal$ProgramRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PProgramRule pprogramruleNode1;
        pprogramruleNode1 = (PProgramRule)nodeArrayList1.get(0);
	if(pprogramruleNode1 != null)
	{
	  listNode2.add(pprogramruleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANonTerminal$ProgramRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PProgramRule pprogramruleNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramruleNode2 = (PProgramRule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramruleNode2 != null)
	{
	  listNode3.add(pprogramruleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ATerminal$MoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMoveActionType pmoveactiontypeNode1;
        pmoveactiontypeNode1 = (PMoveActionType)nodeArrayList1.get(0);
	if(pmoveactiontypeNode1 != null)
	{
	  listNode2.add(pmoveactiontypeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANonTerminal$MoveActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMoveActionType pmoveactiontypeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoveactiontypeNode2 = (PMoveActionType)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoveactiontypeNode2 != null)
	{
	  listNode3.add(pmoveactiontypeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ATerminal$FightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFightActionType pfightactiontypeNode1;
        pfightactiontypeNode1 = (PFightActionType)nodeArrayList1.get(0);
	if(pfightactiontypeNode1 != null)
	{
	  listNode2.add(pfightactiontypeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ANonTerminal$FightActionType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFightActionType pfightactiontypeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfightactiontypeNode2 = (PFightActionType)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfightactiontypeNode2 != null)
	{
	  listNode3.add(pfightactiontypeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 2}, {36, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {10, SHIFT, 5}, {11, SHIFT, 6}, {12, SHIFT, 7}, {13, SHIFT, 8}, },
			{{-1, ERROR, 4}, {1, SHIFT, 16}, {3, SHIFT, 17}, },
			{{-1, ERROR, 5}, {9, SHIFT, 18}, },
			{{-1, ERROR, 6}, {9, SHIFT, 19}, },
			{{-1, ERROR, 7}, {9, SHIFT, 20}, },
			{{-1, ERROR, 8}, {9, SHIFT, 21}, },
			{{-1, ERROR, 9}, {22, SHIFT, 22}, {23, SHIFT, 23}, {24, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, {28, SHIFT, 28}, {29, SHIFT, 29}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 5}, {10, SHIFT, 5}, {11, SHIFT, 6}, {12, SHIFT, 7}, {13, SHIFT, 8}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 35}, },
			{{-1, ERROR, 18}, {0, SHIFT, 36}, },
			{{-1, ERROR, 19}, {0, SHIFT, 37}, },
			{{-1, ERROR, 20}, {0, SHIFT, 38}, },
			{{-1, ERROR, 21}, {0, SHIFT, 39}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 30}, {2, SHIFT, 40}, {4, SHIFT, 41}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 32}, {5, SHIFT, 43}, },
			{{-1, REDUCE, 14}, {22, SHIFT, 22}, {23, SHIFT, 23}, {24, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, {28, SHIFT, 28}, {29, SHIFT, 29}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 36}, {2, SHIFT, 45}, },
			{{-1, ERROR, 37}, {2, SHIFT, 46}, },
			{{-1, ERROR, 38}, {2, SHIFT, 47}, },
			{{-1, ERROR, 39}, {2, SHIFT, 48}, },
			{{-1, ERROR, 40}, {4, SHIFT, 49}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 43}, {14, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {17, SHIFT, 53}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 50}, {7, SHIFT, 60}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 58}, {14, SHIFT, 61}, {30, SHIFT, 62}, {31, SHIFT, 63}, {32, SHIFT, 64}, {33, SHIFT, 65}, {34, SHIFT, 66}, {35, SHIFT, 67}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 60}, {15, SHIFT, 51}, {16, SHIFT, 52}, {17, SHIFT, 53}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, ERROR, 61}, {7, SHIFT, 72}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 68}, {6, SHIFT, 73}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 71}, {8, SHIFT, 74}, {15, SHIFT, 51}, {16, SHIFT, 52}, {17, SHIFT, 53}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, ERROR, 72}, {30, SHIFT, 62}, {31, SHIFT, 63}, {32, SHIFT, 64}, {33, SHIFT, 65}, {34, SHIFT, 66}, {35, SHIFT, 67}, },
			{{-1, ERROR, 73}, {2, SHIFT, 78}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 77}, {8, SHIFT, 79}, {30, SHIFT, 62}, {31, SHIFT, 63}, {32, SHIFT, 64}, {33, SHIFT, 65}, {34, SHIFT, 66}, {35, SHIFT, 67}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 50}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 42}, },
			{{-1, 9}, },
			{{-1, 10}, {15, 34}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 30}, },
			{{-1, 31}, {33, 44}, },
			{{-1, 58}, },
			{{-1, 68}, },
			{{-1, 59}, {60, 70}, {71, 75}, },
			{{-1, 69}, {72, 76}, {77, 80}, },
			{{-1, 32}, },
			{{-1, 4}, },
			{{-1, 15}, },
			{{-1, 33}, },
			{{-1, 71}, },
			{{-1, 77}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: letter",
			"expecting: letter, '{'",
			"expecting: EOF",
			"expecting: 'punchReach', 'punchPower', 'kickReach', 'kickPower'",
			"expecting: '='",
			"expecting: 'always', 'near', 'far', 'much_stronger', 'stronger', 'even', 'weaker', 'much_weaker'",
			"expecting: 'punchReach', 'punchPower', 'kickReach', 'kickPower', 'always', 'near', 'far', 'much_stronger', 'stronger', 'even', 'weaker', 'much_weaker'",
			"expecting: newline, 'punchReach', 'punchPower', 'kickReach', 'kickPower'",
			"expecting: digit",
			"expecting: '['",
			"expecting: newline, '}'",
			"expecting: newline, '}', 'always', 'near', 'far', 'much_stronger', 'stronger', 'even', 'weaker', 'much_weaker'",
			"expecting: newline",
			"expecting: '}'",
			"expecting: 'choose', 'walk_towards', 'walk_away', 'run_towards', 'run_away', 'jump', 'crouch', 'stand'",
			"expecting: '('",
			"expecting: ')', 'choose', 'walk_towards', 'walk_away', 'run_towards', 'run_away', 'jump', 'crouch', 'stand', 'block_low', 'block_high', 'punch_low', 'punch_high', 'kick_low', 'kick_high'",
			"expecting: 'choose', 'block_low', 'block_high', 'punch_low', 'punch_high', 'kick_low', 'kick_high'",
			"expecting: 'walk_towards', 'walk_away', 'run_towards', 'run_away', 'jump', 'crouch', 'stand'",
			"expecting: ']', ')', 'block_low', 'block_high', 'punch_low', 'punch_high', 'kick_low', 'kick_high'",
			"expecting: ']'",
			"expecting: ')', 'walk_towards', 'walk_away', 'run_towards', 'run_away', 'jump', 'crouch', 'stand'",
			"expecting: 'block_low', 'block_high', 'punch_low', 'punch_high', 'kick_low', 'kick_high'",
			"expecting: ')', 'block_low', 'block_high', 'punch_low', 'punch_high', 'kick_low', 'kick_high'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 1, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 11, 9, 11, 6, 3, 12, 12, 12, 12, 13, 2, 2, 14, 11, 6, 6, 6, 6, 2, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 15, 19, 19, 19, 19, 19, 19, 20, 20, 21, 21, 22, 12, 17, 21, 23, 23, 11, 20, 23, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
