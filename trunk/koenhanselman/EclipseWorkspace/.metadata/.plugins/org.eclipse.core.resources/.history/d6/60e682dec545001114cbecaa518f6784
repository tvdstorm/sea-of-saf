/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import saf.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PProgramHeader _programHeader_;
    private PProgramPersonality _left_;
    private PProgramBehaviour _right_;
    private PProgramFooter _programFooter_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PProgramHeader _programHeader_,
        @SuppressWarnings("hiding") PProgramPersonality _left_,
        @SuppressWarnings("hiding") PProgramBehaviour _right_,
        @SuppressWarnings("hiding") PProgramFooter _programFooter_)
    {
        // Constructor
        setProgramHeader(_programHeader_);

        setLeft(_left_);

        setRight(_right_);

        setProgramFooter(_programFooter_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._programHeader_),
            cloneNode(this._left_),
            cloneNode(this._right_),
            cloneNode(this._programFooter_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PProgramHeader getProgramHeader()
    {
        return this._programHeader_;
    }

    public void setProgramHeader(PProgramHeader node)
    {
        if(this._programHeader_ != null)
        {
            this._programHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programHeader_ = node;
    }

    public PProgramPersonality getLeft()
    {
        return this._left_;
    }

    public void setLeft(PProgramPersonality node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public PProgramBehaviour getRight()
    {
        return this._right_;
    }

    public void setRight(PProgramBehaviour node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public PProgramFooter getProgramFooter()
    {
        return this._programFooter_;
    }

    public void setProgramFooter(PProgramFooter node)
    {
        if(this._programFooter_ != null)
        {
            this._programFooter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programFooter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._programHeader_)
            + toString(this._left_)
            + toString(this._right_)
            + toString(this._programFooter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._programHeader_ == child)
        {
            this._programHeader_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._programFooter_ == child)
        {
            this._programFooter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._programHeader_ == oldChild)
        {
            setProgramHeader((PProgramHeader) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((PProgramPersonality) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PProgramBehaviour) newChild);
            return;
        }

        if(this._programFooter_ == oldChild)
        {
            setProgramFooter((PProgramFooter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
