/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class AProgramCharacteristic extends PProgramCharacteristic
{
    private final LinkedList<TLetter> _letter_ = new LinkedList<TLetter>();
    private TEquals _equals_;
    private TDigit _digit_;

    public AProgramCharacteristic()
    {
        // Constructor
    }

    public AProgramCharacteristic(
        @SuppressWarnings("hiding") List<TLetter> _letter_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") TDigit _digit_)
    {
        // Constructor
        setLetter(_letter_);

        setEquals(_equals_);

        setDigit(_digit_);

    }

    @Override
    public Object clone()
    {
        return new AProgramCharacteristic(
            cloneList(this._letter_),
            cloneNode(this._equals_),
            cloneNode(this._digit_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramCharacteristic(this);
    }

    public LinkedList<TLetter> getLetter()
    {
        return this._letter_;
    }

    public void setLetter(List<TLetter> list)
    {
        this._letter_.clear();
        this._letter_.addAll(list);
        for(TLetter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public TDigit getDigit()
    {
        return this._digit_;
    }

    public void setDigit(TDigit node)
    {
        if(this._digit_ != null)
        {
            this._digit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._digit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._letter_)
            + toString(this._equals_)
            + toString(this._digit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._letter_.remove(child))
        {
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._digit_ == child)
        {
            this._digit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TLetter> i = this._letter_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TLetter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._digit_ == oldChild)
        {
            setDigit((TDigit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
