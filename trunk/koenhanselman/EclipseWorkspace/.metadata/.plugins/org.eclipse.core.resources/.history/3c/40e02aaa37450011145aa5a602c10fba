/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import saf.analysis.*;

@SuppressWarnings("nls")
public final class AProgramRule extends PProgramRule
{
    private PConditionType _conditionType_;
    private TBracketl _bracketl_;
    private PProgramMoveAction _programMoveAction_;
    private PProgramFightAction _programFightAction_;
    private TBracketr _bracketr_;
    private TNewline _newline_;

    public AProgramRule()
    {
        // Constructor
    }

    public AProgramRule(
        @SuppressWarnings("hiding") PConditionType _conditionType_,
        @SuppressWarnings("hiding") TBracketl _bracketl_,
        @SuppressWarnings("hiding") PProgramMoveAction _programMoveAction_,
        @SuppressWarnings("hiding") PProgramFightAction _programFightAction_,
        @SuppressWarnings("hiding") TBracketr _bracketr_,
        @SuppressWarnings("hiding") TNewline _newline_)
    {
        // Constructor
        setConditionType(_conditionType_);

        setBracketl(_bracketl_);

        setProgramMoveAction(_programMoveAction_);

        setProgramFightAction(_programFightAction_);

        setBracketr(_bracketr_);

        setNewline(_newline_);

    }

    @Override
    public Object clone()
    {
        return new AProgramRule(
            cloneNode(this._conditionType_),
            cloneNode(this._bracketl_),
            cloneNode(this._programMoveAction_),
            cloneNode(this._programFightAction_),
            cloneNode(this._bracketr_),
            cloneNode(this._newline_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramRule(this);
    }

    public PConditionType getConditionType()
    {
        return this._conditionType_;
    }

    public void setConditionType(PConditionType node)
    {
        if(this._conditionType_ != null)
        {
            this._conditionType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionType_ = node;
    }

    public TBracketl getBracketl()
    {
        return this._bracketl_;
    }

    public void setBracketl(TBracketl node)
    {
        if(this._bracketl_ != null)
        {
            this._bracketl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bracketl_ = node;
    }

    public PProgramMoveAction getProgramMoveAction()
    {
        return this._programMoveAction_;
    }

    public void setProgramMoveAction(PProgramMoveAction node)
    {
        if(this._programMoveAction_ != null)
        {
            this._programMoveAction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programMoveAction_ = node;
    }

    public PProgramFightAction getProgramFightAction()
    {
        return this._programFightAction_;
    }

    public void setProgramFightAction(PProgramFightAction node)
    {
        if(this._programFightAction_ != null)
        {
            this._programFightAction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programFightAction_ = node;
    }

    public TBracketr getBracketr()
    {
        return this._bracketr_;
    }

    public void setBracketr(TBracketr node)
    {
        if(this._bracketr_ != null)
        {
            this._bracketr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bracketr_ = node;
    }

    public TNewline getNewline()
    {
        return this._newline_;
    }

    public void setNewline(TNewline node)
    {
        if(this._newline_ != null)
        {
            this._newline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newline_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._conditionType_)
            + toString(this._bracketl_)
            + toString(this._programMoveAction_)
            + toString(this._programFightAction_)
            + toString(this._bracketr_)
            + toString(this._newline_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._conditionType_ == child)
        {
            this._conditionType_ = null;
            return;
        }

        if(this._bracketl_ == child)
        {
            this._bracketl_ = null;
            return;
        }

        if(this._programMoveAction_ == child)
        {
            this._programMoveAction_ = null;
            return;
        }

        if(this._programFightAction_ == child)
        {
            this._programFightAction_ = null;
            return;
        }

        if(this._bracketr_ == child)
        {
            this._bracketr_ = null;
            return;
        }

        if(this._newline_ == child)
        {
            this._newline_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._conditionType_ == oldChild)
        {
            setConditionType((PConditionType) newChild);
            return;
        }

        if(this._bracketl_ == oldChild)
        {
            setBracketl((TBracketl) newChild);
            return;
        }

        if(this._programMoveAction_ == oldChild)
        {
            setProgramMoveAction((PProgramMoveAction) newChild);
            return;
        }

        if(this._programFightAction_ == oldChild)
        {
            setProgramFightAction((PProgramFightAction) newChild);
            return;
        }

        if(this._bracketr_ == oldChild)
        {
            setBracketr((TBracketr) newChild);
            return;
        }

        if(this._newline_ == oldChild)
        {
            setNewline((TNewline) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
