/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}
PARSER_BEGIN(SAFParser)package parser;

import ast.object.Fighter;
import ast.fighter.prop.Id;
import ast.condition.*;
import ast.Printer;
import ast.action.*;
import ast.fighter.*;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Set;

public class SAFParser{  public static void main(String args []) throws ParseException  {
    FileReader input = initFile();
    SAFParser parser = null;
    boolean useSystemIn = !initSAFParser(parser, input);    launchSAFParser(useSystemIn, parser);  }
  
  private static void launchSAFParser(boolean useSystemIn, SAFParser parser){
    if(useSystemIn){
        while (true)
        {
          System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
          try{
           startParser(parser, true);
          } catch(Error e){
           System.out.println(e);
           break;
          }
        }
    } else{
        try{
            startParser(parser, false);
        } catch(Error e){
            System.out.println(e);
            }
    }
  }
  
  private static boolean initSAFParser(SAFParser parser, FileReader input){
    boolean result = false;
    if(input != null){
        parser = new SAFParser(input);
        result = true;
    } else {
        System.out.println("Defaulting to console-input");
        parser = new SAFParser(System.in);
        result = false;
    }
    return result;
  }
  
  private static FileReader initFile(){
    FileReader input;
    boolean useSystemIn = false;
    try{
        input = new FileReader("input.txt");
        System.out.println("input-file found, using it.");
    } catch(FileNotFoundException e) {
        System.out.println("input-file not found: " + e);
        input = null;
    }
    return input;
  }
  
  private static void startParser(SAFParser parser, boolean useSystemIn) throws Error{
      try
      {
        Fighter fighter = getFighter();
        System.out.println(fighter);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        if(useSystemIn) parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        throw e;
      }
  }
  }PARSER_END(SAFParser)SKIP :{  " "| "\r"| "\t"| "\n"}

TOKEN: /* operators */
{
    < AND : "and" >
|   < OR : "or" >
|   < CHOOSE : "choose" >
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < ID : (["a"-"z", "A" - "Z", "0"-"9", "_"])+ >


/*
| < FIGHTER : < ID > "{" <FIGHTER_PROPS> "}" >
| < #FIGHTER_PROPS : (<FIGHTER_PROP>)* >
| < FIGHTER_PROP : <FIGHT_CHAR> >
| < #FIGHT_POWER : <DIGIT> >//(<DIGIT>~["0"]) | ("1""0") >
| < FIGHT_CHAR : <FIGHT_ID> "=" <FIGHT_POWER> >
| < FIGHT_ID : <KICKPOWER> | <PUNCHPOWER> | <KICKREACH> | <PUNCHREACH> >
| < #KICKPOWER : "kickPower" >
| < #PUNCHPOWER : "punchPower" >
| < #KICKREACH : "kickReach" >
| < #PUNCHREACH : "punchReach" >
*/}

Fighter getFighter():
{
    Token t;
}
{  t = <ID>  {
    Set fighterProps = fighterProps();
    Fighter fighter = new Fighter(t.image);
    return fighter;  }
}

void fighter():
{}
{
    <ID> fighterProps()
}

Set fighterProps():
{}
{
    "{"(fighterProp())*"}"
    {return null;}
}

FighterProp fighterProp():
{
    FighterProp result;
}
{
    (
        LOOKAHEAD(2)
	    result = strength()
	    |
	    result = behavior()
    )
    {return result;}
}

Strength strength():
{
    String fightId;
    int fightPower;
}
{
    fightId = fightId() "=" fightPower = fightPower()
    {return new Strength(fightId, fightPower);}
}

Behavior behavior():
{
	Condition condition;
	Action moveAction;
	Action fightAction;
}
{
	condition = condition()
	"["
	   moveAction = action()
	   fightAction = action()
	"]"
	
	{	    System.out.println(Printer.print(condition));	    return new Behavior(condition, moveAction, fightAction);	}

}

Condition condition():
{
    Condition lhs;
    Condition rhs;
    String id;
}
{   
    LOOKAHEAD(2)
    (id = <ID>.image <OR> rhs = condition())
    {
        lhs = new Leaf(id);
        return new Or(lhs, rhs);
    }
    |
    LOOKAHEAD(2)
    (id = <ID>.image <AND> rhs = condition())
    {
        lhs = new Leaf(id);
        return new And(lhs, rhs);
    }
    |
    id = <ID>.image
    {
        return new Leaf(id);
    }
}

Action action():
{
    Action a;
}
{

    (LOOKAHEAD(2) (a=choose()) | (a=moveAction()))
    //(LOOKAHEAD(2) (a=choose()) | (a=fightAction()))
    {return a;}
    
}

Choose choose():
{
    Choose c;
    SimpleAction s;
}
{
    <CHOOSE> "("
                {c = new Choose();} 
                (
                    (LOOKAHEAD(2)(s=moveAction())|(s=fightAction()))
                    {c.addChoice(s.getAction());}
                )+
              ")"
              {return c;}
}

SimpleAction moveAction():
{
    String image;
}
{
    image = <ID>.image
    {return new SimpleAction(image);}
}

SimpleAction fightAction():
{
    String image;
}
{
    image = <ID>.image
    {return new SimpleAction(image);}
}

String fightId():
{
    String image;
}
{
    image = <ID>.image
    {return image;}
}

int fightPower():
{
    String image;
    int fightPower;
}
{
   image = <CONSTANT>.image
    {
       fightPower = Integer.valueOf(image).intValue();
       return fightPower;
    }
}


String getFighterName():
{
    Token t;
}
{
    t = <ID>
    {return t.image;}
}