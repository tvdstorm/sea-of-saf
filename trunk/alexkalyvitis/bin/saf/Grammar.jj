/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*/options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Saf)

package saf;

import saf.objects.*;

public class Saf/*@bgen(jjtree)*/implements SafTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSafState jjtree = new JJTSafState();

/*@egen*/   
	public static void main(String args[])
	{
	    try
	    {
	          Saf parser = new Saf(System.in);
	          Fighter fighter = parser.Parse();
	    }
	    catch(Exception e)
	    {
	          e.printStackTrace();
	    }
	}
}

PARSER_END(Saf)

SKIP : // Whitespace
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   "\r\n"
}

TOKEN :
{
	< ASSIGNMENT : "=" >
|   < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < PROPERTYVALUE : (["1"-"9"] | "10") >
|   < OPENCURLYBRACKET : "{" >
|   < CLOSECURLYBRACKET : "}" >
|   < OPENSQAREBRACKET : "[" >
|   < CLOSESQAREBRACKET : "]" >
}

Fighter Parse() :
{/*@bgen(jjtree) Parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Fighter fighter = new Fighter();
	Token fighterName = new Token();
	Strength fighterStrength = new Strength();
	Behavior fighterBehavior = new Behavior();
}
{/*@bgen(jjtree) Parse */
    try {
/*@egen*/
    ( fighterName = < IDENTIFIER > )*    {
        fighter.setName(fighterName.toString());    }
    < OPENCURLYBRACKET >
	(
	    LOOKAHEAD(2) ( fighterStrength = Strength() )
	    { fighter.addStrength(fighterStrength); }
	    |
	    LOOKAHEAD(2) ( fighterBehavior = Behavior() )	    { fighter.addBehavior(fighterBehavior); }
	)*
	<  CLOSECURLYBRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return fighter; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Strength Strength() :
{/*@bgen(jjtree) Strength */
    SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name = new Token();
    Token value = new Token();
}
{/*@bgen(jjtree) Strength */
    try {
/*@egen*/
    (name = < IDENTIFIER >)
    < ASSIGNMENT >
    (value = < PROPERTYVALUE >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return new Strength(name.toString(),Integer.valueOf(value.toString())); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

Behavior Behavior() :
{/*@bgen(jjtree) Behavior */
    SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token condition = new Token();
    Token move = new Token();
    Token attack = new Token();
}{/*@bgen(jjtree) Behavior */
    try {
/*@egen*/
    (condition = < IDENTIFIER >)
    < OPENSQAREBRACKET >
    (move = < IDENTIFIER >)
    (attack = < IDENTIFIER >)
    < CLOSESQAREBRACKET >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return new Behavior(new Condition(condition.toString()), new Move(move.toString()), new Attack(attack.toString())); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}




