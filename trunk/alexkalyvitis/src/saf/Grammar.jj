/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*/options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Saf)

package saf;

public class Saf/*@bgen(jjtree)*/implements SafTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSafState jjtree = new JJTSafState();

/*@egen*/   
	public static void main(String args[])
	{
	    try
	    {
	          Saf parser = new Saf(System.in);
	          SimpleNode tree = parser.Parse();
	          tree.dump("");
	    }
	    catch(Exception e)
	    {
	          e.printStackTrace();
	    }
	}
}

PARSER_END(Saf)

SKIP : // Whitespace
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   "\r\n"
}

TOKEN :
{
	< ASSIGNMENT : "=" >
|   < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < PROPERTYVALUE : (["1"-"9"] | "10") >
|   < OPENSQAREBRACKET : "[" >
|   < CLOSESQAREBRACKET : "]" >
}

SimpleNode Parse() :
{/*@bgen(jjtree) Parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	(
	    LOOKAHEAD(2) Strength()
	    |
	    LOOKAHEAD(2) Condition()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Strength() :
{/*@bgen(jjtree) Strength */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Strength */
    try {
/*@egen*/
    < IDENTIFIER >
    < ASSIGNMENT >
    < PROPERTYVALUE >/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

void Condition() :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    < IDENTIFIER >
    < OPENSQAREBRACKET >
    < IDENTIFIER >
    < IDENTIFIER >
    < CLOSESQAREBRACKET >/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}




