/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg2)package SAFparser;

public class eg2{  public static void main(String args [])  {
/*    System.out.println("Reading from file "+args[1]);
	String input="";
	//File reader
	  try{
  // Open the file that is the first 
  // command line parameter
  		FileInputStream fstream = new FileInputStream(args[1]);
  // Get the object of DataInputStream
  DataInputStream in = new DataInputStream(fstream);
  BufferedReader br = new BufferedReader(new InputStreamReader(in));
  String strLine;
  //Read File Line By Line
  while ((strLine = br.readLine()) != null)   {
  // Print the content on the console
  input+=strLine;
  }
  //Close the input stream
  in.close();
    }catch (Exception e){//Catch exception if any
  System.err.println("Error: " + e.getMessage());
  }
  new eg2(input);
*/        System.out.println("Reading from standard input...");    System.out.println("Enter a SAF character description :");      new eg2(System.in);    try    {      SimpleNode n = eg2.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(eg2)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

TOKEN :
{
  < MOVE_ACTION :
 	 < MOVE_ACTION_TYPE >
  >
}TOKEN : /* LITERALS */{
  < MOVE_ACTION_TYPE :
 	 < WALK_TO > |
  	 < WALK_AW > |
  	 < RUN_TO >  |
  	 < RUN_AW >  |
  	 < JUMP >    |
  	 < CROUCH >  |
  	 < STAND >  
  	 
  >| < #WALK_TO: ["w"]["a"]["l"]["k"]["_"]["t"]["o"]["w"]["a"]["r"]["d"]["s"] >
| < #WALK_AW: ["w"]["a"]["l"]["k"]["_"]["a"]["w"]["a"]["y"] >
| < #RUN_TO:  ["r"]["u"]["n"]["_"]["t"]["o"]["w"]["a"]["r"]["d"]["s"] >
| < #RUN_AW:  ["r"]["u"]["n"]["_"]["a"]["w"]["a"]["y"] >
| < #JUMP:    ["j"]["u"]["m"]["p"] >
| < #CROUCH:  ["c"]["r"]["o"]["u"]["c"]["h"] >
| < #STAND:   ["s"]["t"]["a"]["n"]["d"] >}

TOKEN :
{
  < FIGHT_ACTION :
 	 < FIGHT_ACTION_TYPE >
  >
}

TOKEN : /* LITERALS */
{
  < FIGHT_ACTION_TYPE :
 	 < BLOCK_LOW >  |
  	 < BLOCK_HIGH > |
  	 < PUNCH_LOW >  |
  	 < PUNCH_HIGH > |
  	 < KICK_LOW >   |
  	 < KICK_HIGH >  
  	 
  >
| < #BLOCK_LOW:  ["b"]["l"]["o"]["c"]["k"]["_"]["l"]["o"]["w"] >
| < #BLOCK_HIGH: ["b"]["l"]["o"]["c"]["k"]["_"]["h"]["i"]["g"]["h"] >
| < #PUNCH_LOW:  ["p"]["u"]["n"]["c"]["h"]["_"]["l"]["o"]["w"] >
| < #PUNCH_HIGH: ["p"]["u"]["n"]["c"]["h"]["_"]["h"]["i"]["g"]["h"] >
| < #KICK_LOW:   ["k"]["i"]["c"]["k"]["_"]["l"]["o"]["w"] >
| < #KICK_HIGH:  ["k"]["i"]["c"]["k"]["_"]["h"]["i"]["g"]["h"] >
}
TOKEN :
{
  < CONDITIONS :
 	 < CONDITION_TYPE >
  >
}

TOKEN :
{  < CONDITION_TYPE:
  < ALWAYS >   |
  < NEAR >     |
  < FAR >      |
  < MUCH_STR > |
  < STRONGER >  |
  < EVEN >     |
  < WEAKER >   |
  < MUCH_WEA > 
 >
| < #ALWAYS: ["a"]["l"]["w"]["a"]["y"]["s"] >
| < #NEAR: ["n"]["e"]["a"]["r"] >
| < #FAR: ["f"]["a"]["r"] >
| < #MUCH_STR: ["m"]["u"]["c"]["h"]["_"]["s"]["t"]["r"]["o"]["n"]["g"]["e"]["r"] >
| < #STRONGER: ["s"]["t"]["r"]["o"]["n"]["g"]["e"]["r"] >
| < #EVEN: ["e"]["v"]["e"]["n"] >
| < #WEAKER: ["w"]["e"]["a"]["k"]["e"]["r"] >
| < #MUCH_WEA: ["m"]["u"]["c"]["h"]["_"]["w"]["e"]["a"]["k"]["e"]["r"] >
}

TOKEN : 
{
  < NUMBER :
    < NUM >
  >
| < #NUM : [ "0"-"9" ] >
}

TOKEN :
{	< CHARACTERISTICS:
	< PUNCH_REACH >   |
	< PUNCH_POWER >   |
	< KICK_REACH >    |
	< KICK_POWER >
	>
| <  #PUNCH_REACH: ["p"]["u"]["n"]["c"]["h"]["R"]["e"]["a"]["c"]["h"] >
| <  #PUNCH_POWER: ["p"]["u"]["n"]["c"]["h"]["P"]["o"]["w"]["e"]["r"] >
| <  #KICK_REACH: ["k"]["i"]["c"]["k"]["R"]["e"]["a"]["c"]["h"] >
| <  #KICK_POWER: ["k"]["i"]["c"]["k"]["P"]["o"]["w"]["e"]["r"] >
	
}

TOKEN :
{	< CHOOSE:
	< CH_WRD>
	>
| <  #CH_WRD: ["c"]["h"]["o"]["o"]["s"]["e"] >
}

TOKEN :
{
	<LEFT_PARENTHESIS :
	< LEFT_PAR >
	>
| <  #LEFT_PAR: ["("] >
}
TOKEN :
{
	<RIGHT_PARENTHESIS :
	< RIGHT_PAR >
	>
| <  #RIGHT_PAR: [")"] >
}

TOKEN :
{	<LEFT_SQBRACKET :
	< LEFT_SQBR >
	>
| <  #LEFT_SQBR: ["["] >
}
TOKEN :
{
	<RIGHT_SQBRACKET :
	< RIGHT_SQBR >
	>
| <  #RIGHT_SQBR: ["]"] >
}

TOKEN :
{
	<LEFT_CURLBRACKET :
	< LEFT_CURLBR >
	>
| <  #LEFT_CURLBR: ["{"] >
}
TOKEN :
{
	<RIGHT_CURLBRACKET :
	< RIGHT_CURLBR >
	>
| <  #RIGHT_CURLBR: ["}"] >
}	
TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() :{}{  Expression()  {    return jjtThis;  }}void Expression() :{}{  Identifier() LeftCURLBR() (Personality())* (Behaviour())* RightCURLBR() }
void Behaviour() :
{}
{	  Conditions() LeftSQBR() (MoveAction()|ChooseMoveAction()) (FightAction() | ChooseFightAction()) RightSQBR()
}

void Personality() :
{}
{	  Characteristics() "=" Number0_9()
}

void ChooseMoveAction() :
{}
{
	 Choose() LeftParenthesis() MoveAction() MoveAction() RightParenthesis()
}

void ChooseFightAction() :
{}
{
	 Choose() LeftParenthesis() FightAction() FightAction() RightParenthesis()
}
void Identifier() :{}{  < IDENTIFIER >}
void MoveAction() :{}{  < MOVE_ACTION >}

void FightAction() :
{}
{
  < FIGHT_ACTION >
}

void Choose() :
{}
{  < CHOOSE >
}

void Conditions():
{}{  < CONDITIONS >
}

void Number0_9():
{}
{
  < NUMBER >
}

void LeftParenthesis():
{}
{
  < LEFT_PARENTHESIS >
}

void RightParenthesis():
{}
{
  < RIGHT_PARENTHESIS >
}

void LeftSQBR():
{}
{
  < LEFT_SQBRACKET >
}

void RightSQBR():
{}
{
  < RIGHT_SQBRACKET >
}

void LeftCURLBR():
{}
{
  < LEFT_CURLBRACKET >
}

void RightCURLBR():
{}
{
  < RIGHT_CURLBRACKET >
}

void Characteristics():
{}
{
  < CHARACTERISTICS >
}