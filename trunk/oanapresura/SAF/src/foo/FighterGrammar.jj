/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FighterGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(FighterGrammar)
package foo;
import java.io.FileInputStream;
import java.io.InputStream;

public class FighterGrammar/*@bgen(jjtree)*/implements FighterGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTFighterGrammarState jjtree = new JJTFighterGrammarState();

/*@egen*/  public static void main(String args [])  {    try{
		String file = "input.txt";
		InputStream input = new FileInputStream("input.txt");
		System.out.println("Parsing from file ... ");	
		FighterGrammar parser = new FighterGrammar(input);
		SimpleNode n = parser.Input();
		n.dump("");      
		System.out.print("All good!");
    }
	catch(Exception e)
	{
		System.out.println("Oops! ");
		System.out.println(e.getMessage());
		e.printStackTrace();
	}  }}PARSER_END(FighterGrammar)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}


TOKEN : /* Values for player strength */
{
	<STRENGTH_VALUE: ( ["1"-"9"] | "10")> 
}

TOKEN : /* Operators */
{
	<AND: "AND" | "and"> |
	<OR: "OR" | "or"> |
	<CHOOSE: "choose"> |
	<ASSIGN: "=">
}

TOKEN : /* Types of paranthesis used */
{
	<LSQBRACKET: "["> | 
	<RSQBRACKET: "]"> |
	<LBRACE: "{"> | 
	<RBRACE: "}"> |
	<LBRACKET: "(" > |
	<RBRACKET: ")">		
}

TOKEN : 
{	
	< MOVE: "jump" | "crouch" | "stand" | "runTowards" | "runAway" | "walkTowards" | "walkAway" > 	|
	< STRENGTH: "punchReach" | "kickReach" | "kickPower" | "punchPower" > |
	< ATTACK: "punchLow" | "punchHigh" | "kickLow" | "kickHigh" | "blockLow" | "blockHigh" > |
	< CONDITION: "stronger" | "weaker" | "muchStronger" | "muchWeaker" | "even" | "near" | "far" | "always" >
}

TOKEN :
{
	<NAME: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > 
}

/** Root production. */

SimpleNode Input() :
{/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
        try {
/*@egen*/
	<NAME> <LBRACE> ( Strength() )+ ( ConditionalSpec() )+ <RBRACE> <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Value() :
{/*@bgen(jjtree) Value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Value */
        try {
/*@egen*/
	<STRENGTH_VALUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}
void Strength() :
{/*@bgen(jjtree) Strength */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Strength */
         try {
/*@egen*/
	 <STRENGTH> <ASSIGN> <STRENGTH_VALUE>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Attack() :
{/*@bgen(jjtree) Attack */
  SimpleNode jjtn000 = new SimpleNode(JJTATTACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attack */
         try {
/*@egen*/
	 <ATTACK>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/ 
}

void ConditionalSpec() :
{/*@bgen(jjtree) ConditionalSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalSpec */
          try {
/*@egen*/
	  <CONDITION> <LSQBRACKET> ( <MOVE> <ATTACK> ) <RSQBRACKET>/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

