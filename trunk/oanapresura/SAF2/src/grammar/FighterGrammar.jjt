/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(FighterGrammar)
package grammar;
import ast.*;
import interpreter.*;
import constants.*;
import visitor.*;

import java.io.FileInputStream;
import java.io.InputStream;

public class FighterGrammar implements CorrectValues{
  public SAF saf;
  public Interpreter i;
  public VisitorTest vt;
  
  public FighterGrammar(){
  }
    //public static void main(String args [])
  public void run()  {    try{
		String file = "input.txt";
		InputStream input = new FileInputStream("input.txt");
		System.out.println("[Parser]Parsing from file ... ");	
		FighterGrammar parser = new FighterGrammar(input);
		saf = parser.Parse();					
		i = new Interpreter(saf.getBot1(), saf.getBot2());
		boolean result = i.interpret();
		vt = new VisitorTest();
		vt.startVisit(saf.getBot1(),saf.getBot2());
		if (result == true)
			System.out.println("[Interpreter]Healthy fighters!");
			
		System.out.println("[Parser]Done!");
    }
    
	catch(Exception e)
	{
		System.out.println("[Parser]Oops! ");
		System.out.println(e.getMessage());
		e.printStackTrace();
	}  }}PARSER_END(FighterGrammar)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}


TOKEN : /* Operators */
{
	<AND: "AND" | "and"> |
	<OR: "OR" | "or"> |
	<ASSIGN: "="> |
	<CHOOSE: "choose">
}

TOKEN : /* Types of paranthesis used */
{
	<LSQBRACKET: "["> | 
	<RSQBRACKET: "]"> |
	<LBRACE: "{"> | 
	<RBRACE: "}"> |			
	<LBRACKET: "("> |
	<RBRACKET: ")">
}


TOKEN :
{
	<IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > |
	<VALUE:  ["1"-"9"]  ( ["0"-"9"] )* > 
}

/** Root production. */

SAF Parse() :
{
 	 	
	Bot bot1;
	Bot bot2;	
}
{  	
	bot1 = getBot()
	bot2 = getBot()		<EOF>
	
	{	  		SAF saf = new SAF();
		saf.setBot1(bot1);
		saf.setBot2(bot2);
		return saf;
	} 	
}	
Bot getBot():
{
  	BehaviourItem i;	Token name = new Token();
	Personality p = new Personality();
	Behaviour b = new Behaviour();
	Strength s = new Strength();	
	Bot bot = new Bot();
}
{
			name = < IDENTIFIER >
		{
		  bot.setName(name.toString());	  		}
		
		<LBRACE>
		
		(
		  LOOKAHEAD(2)
		  
		  ( s = Strength() )
		  {
		    p.addStrength(s);		  }
		| 
		  ( i = BehaviourItem() )
		  {
		    b.addCondition(i);		  }
		    
		)*	
		
		<RBRACE>
	
		{
		  bot.setBehaviour(b);
		  bot.setPersonality(p);		}
	
	{	  return bot;
	}
} 


Strength Strength() :
{
	Token strength = new Token();
	Token value = new Token();
	
}
{
	 (strength = <IDENTIFIER>) <ASSIGN> (value = <VALUE>)
	 {	 		 	
		return new Strength(strength.toString(), Integer.valueOf(value.toString()));   	 }
}

BehaviourItem BehaviourItem() :
{	Condition condition = new Condition();		
	Action action1;
	Action action2;
}
{	 
	 ( 
	 	 Condition(condition)
		 <LSQBRACKET>
		  (
		  	  action1 = Action()						  
			  action2 = Action()			  
		  )  
		 <RSQBRACKET>
	 )
	 {
	    	 
	 	action1.setFlag(CorrectValues.MOVE_TYPE);
	 	action2.setFlag(CorrectValues.ATTACK_TYPE);
		return new BehaviourItem(condition, action1, action2); 
	 }
}

void Condition(Condition c) :
{
	Token condition = new Token();
}
{
	(condition = <IDENTIFIER>)
	{
		c.setCondition(condition.toString());
		
	}
}


Action Action() :
{
  	Action a;  	
  	Token action = new Token();
	Token action1 = new Token();
	Token action2 = new Token();	
	boolean choice;}
{	(
		LOOKAHEAD(2)
		(
			<CHOOSE> 
			<LBRACKET> 
				(action1 = <IDENTIFIER>) (action2 = <IDENTIFIER>)
			<RBRACKET>
		)
		{			  			
  			choice = true;  			
		}
		|
		(			 
			action = <IDENTIFIER>		
		)
		{
					
			choice = false;
		}
	 
	)	
	{
			 
		if (choice)		{		  		
			a = new Action(action1.toString(),action2.toString());
			/* System.out.println(action1.toString() + " " + action2.toString()); */
		}		  		
		else		{		  
			a = new Action(action.toString());
			/* System.out.println(action.toString()); */
		}	
		return a;			 	
	}
}


