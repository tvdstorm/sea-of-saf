/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FighterGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(FighterGrammar)
package grammar;
import ast.*;
import interpreter.*;
import constants.*;
import visitor.*;

import java.io.FileInputStream;
import java.io.InputStream;

public class FighterGrammar implements/*@bgen(jjtree)*/ FighterGrammarTreeConstants, /*@egen*/ CorrectValues{/*@bgen(jjtree)*/
  protected static JJTFighterGrammarState jjtree = new JJTFighterGrammarState();

/*@egen*/
  public SAF saf;
  public Interpreter i;
  public VisitorTest vt;
  
  public FighterGrammar(){
  }
    //public static void main(String args [])
  public void run()  {    try{
		String file = "input.txt";
		InputStream input = new FileInputStream("input.txt");
		System.out.println("[Parser]Parsing from file ... ");	
		FighterGrammar parser = new FighterGrammar(input);
		saf = parser.Parse();					
		i = new Interpreter(saf.getBot1(), saf.getBot2());
		boolean result = i.interpret();
		vt = new VisitorTest();
		vt.startVisit(saf.getBot1(),saf.getBot2());
		if (result == true)
			System.out.println("[Interpreter]Healthy fighters!");
			
		System.out.println("[Parser]Done!");
    }
    
	catch(Exception e)
	{
		System.out.println("[Parser]Oops! ");
		System.out.println(e.getMessage());
		e.printStackTrace();
	}  }}PARSER_END(FighterGrammar)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}


TOKEN : /* Operators */
{
	<AND: "AND" | "and"> |
	<OR: "OR" | "or"> |
	<ASSIGN: "="> |
	<CHOOSE: "choose">
}

TOKEN : /* Types of paranthesis used */
{
	<LSQBRACKET: "["> | 
	<RSQBRACKET: "]"> |
	<LBRACE: "{"> | 
	<RBRACE: "}"> |			
	<LBRACKET: "("> |
	<RBRACKET: ")">
}


TOKEN :
{
	<IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > |
	<VALUE:  ["1"-"9"]  ( ["0"-"9"] )* > 
}

/** Root production. */

SAF Parse() :
{/*@bgen(jjtree) Parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
 	 	
	Bot bot1;
	Bot bot2;	
}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/  	
	bot1 = getBot()
	bot2 = getBot()		<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{	  		SAF saf = new SAF();
		saf.setBot1(bot1);
		saf.setBot2(bot2);
		return saf;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 	
}	
Bot getBot():
{/*@bgen(jjtree) getBot */
        SimpleNode jjtn000 = new SimpleNode(JJTGETBOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	BehaviourItem i;	Token name = new Token();
	Personality p = new Personality();
	Behaviour b = new Behaviour();
	Strength s = new Strength();	
	Bot bot = new Bot();
}
{/*@bgen(jjtree) getBot */
                try {
/*@egen*/
			name = < IDENTIFIER >
		{
		  bot.setName(name.toString());	  		}
		
		<LBRACE>
		
		(
		  LOOKAHEAD(2)
		  
		  ( s = Strength() )
		  {
		    p.addStrength(s);		  }
		| 
		  ( i = BehaviourItem() )
		  {
		    b.addCondition(i);		  }
		    
		)*	
		
		<RBRACE>
	
		{
		  bot.setBehaviour(b);
		  bot.setPersonality(p);		}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{	  return bot;
	}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
} 


Strength Strength() :
{/*@bgen(jjtree) Strength */
        SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token strength = new Token();
	Token value = new Token();
	
}
{/*@bgen(jjtree) Strength */
         try {
/*@egen*/
	 (strength = <IDENTIFIER>) <ASSIGN> (value = <VALUE>)/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {	 		 	
		return new Strength(strength.toString(), Integer.valueOf(value.toString()));   	 }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

BehaviourItem BehaviourItem() :
{/*@bgen(jjtree) BehaviourItem */
        SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIOURITEM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Condition condition = new Condition();		
	Action action1;
	Action action2;
}
{/*@bgen(jjtree) BehaviourItem */
         try {
/*@egen*/	 
	 ( 
	 	 Condition(condition)
		 <LSQBRACKET>
		  (
		  	  action1 = Action()						  
			  action2 = Action()			  
		  )  
		 <RSQBRACKET>
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	    	 
	 	action1.setFlag(CorrectValues.MOVE_TYPE);
	 	action2.setFlag(CorrectValues.ATTACK_TYPE);
		return new BehaviourItem(condition, action1, action2); 
	 }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Condition(Condition c) :
{/*@bgen(jjtree) Condition */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token condition = new Token();
}
{/*@bgen(jjtree) Condition */
        try {
/*@egen*/
	(condition = <IDENTIFIER>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		c.setCondition(condition.toString());
		
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Action Action() :
{/*@bgen(jjtree) Action */
        SimpleNode jjtn000 = new SimpleNode(JJTACTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Action a;  	
  	Token action = new Token();
	Token action1 = new Token();
	Token action2 = new Token();	
	boolean choice;}
{/*@bgen(jjtree) Action */
        try {
/*@egen*/	(
		LOOKAHEAD(2)
		(
			<CHOOSE> 
			<LBRACKET> 
				(action1 = <IDENTIFIER>) (action2 = <IDENTIFIER>)
			<RBRACKET>
		)
		{			  			
  			choice = true;  			
		}
		|
		(			 
			action = <IDENTIFIER>		
		)
		{
					
			choice = false;
		}
	 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{
			 
		if (choice)		{		  		
			a = new Action(action1.toString(),action2.toString());
			/* System.out.println(action1.toString() + " " + action2.toString()); */
		}		  		
		else		{		  
			a = new Action(action.toString());
			/* System.out.println(action.toString()); */
		}	
		return a;			 	
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


