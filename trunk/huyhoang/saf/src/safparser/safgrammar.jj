options{	JDK_VERSION = "1.5";	static = false;}PARSER_BEGIN(safgrammar)package safparser;import AST.*;import java.util.*;public class safgrammar {	protected ASTManager ast;	public safgrammar()	{		ast = new ASTManager();	}	}PARSER_END(safgrammar)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{ 	< CONNECTIVE : "and" | "or" >}TOKEN :{  < INTEGER_LITERAL : (["0"-"9"])+ >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void Root() :{}{	< IDENTIFIER > "{"		(AssignmentStatement())*	"}"}void AssignmentStatement() :{	Token identifier;	Token integerLiteral;}{  	identifier = < IDENTIFIER >  	"="  	integerLiteral = < INTEGER_LITERAL >	{		AssignmentExpression a = new AssignmentExpression(identifier.image, Integer.parseInt(integerLiteral.image));		ast.getStatements().add(a);	}}