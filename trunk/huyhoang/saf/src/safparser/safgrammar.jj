options{	JDK_VERSION = "1.5";	static = false;	LOOKAHEAD = 2;}PARSER_BEGIN(safgrammar)package safparser;import AST.*;import java.util.*;public class safgrammar {	protected ASTManager ast;	public static void main(String args [])	{ 	    System.out.println("Reading from standard input...");	    System.out.print("Enter a SAF specification: ");		safgrammar parser = new safgrammar(System.in);		parser.Initialize();	    try	    {	      parser.Root();	      System.out.println(parser.ast.toString());	    }	    catch (Exception e)	    {	      System.out.println("Oops.");	      System.out.println(e.getMessage());		}	}  	protected void Initialize()	{		ast = new ASTManager();	}}PARSER_END(safgrammar)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{ 	< CONNECTIVE : "and" | "or" >}TOKEN :{  < INTEGER_LITERAL : (["0"-"9"])+ >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void Root() :{}{	< IDENTIFIER > "{"		(AssignmentStatement())*		(IfStatement())*	"}"}void AssignmentStatement() :{	Token identifier;	Token integerLiteral;}{  	identifier = < IDENTIFIER >  	"="  	integerLiteral = < INTEGER_LITERAL >	{		AssignmentStatement assignment = new AssignmentStatement(identifier.image, Integer.parseInt(integerLiteral.image));		ast.getStatements().add(assignment);	}}void IfStatement() :{  	Token identifier;  	Function functionCall1;  	Function functionCall2;}{  	identifier = < IDENTIFIER >  	"["  		functionCall1 = FunctionCall()  		functionCall2 = FunctionCall()  	"]"  	{		Variable variableToEvaluate = new Variable(identifier.image, true);		BoolExpression aBooleanExpression = new BoolExpression(BoolExpression.ComparisonOperators.equalsOperator, variableToEvaluate, true);		List<Statement> listOfStatements = new ArrayList<Statement>();		listOfStatements.add( functionCall1 );		listOfStatements.add( functionCall2 );		IfStatement anIfStatement = new IfStatement(aBooleanExpression, listOfStatements);		ast.getStatements().add(anIfStatement);  	}}Function FunctionCall() :{  	Token identifier;  	Token parameter1;  	Token parameter2;}{  	identifier = < IDENTIFIER >  	"("		< IDENTIFIER >		< IDENTIFIER >  	")"  	  	{		return new Function(identifier.image);  	}}