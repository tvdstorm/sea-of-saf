options{	JDK_VERSION = "1.5";	static = false;	LOOKAHEAD = 10;}PARSER_BEGIN(Parser)package safparser;import saf.ast.*;import java.util.*;public class Parser {	private Fighter fighter;	public Fighter getFighter() { 		return fighter;	}	public static void main(String args []) { 	    System.out.println("Reading from standard input...");	    System.out.print("Enter a SAF specification: ");		Parser parser = new Parser(System.in);	    try	    {	      parser.Root();	    }	    catch (Exception e)	    {	      System.out.println("Oops.");	      System.out.println(e);		}	}}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{ 	< CONNECTIVE : "and" | "or" >}TOKEN :{  < INTEGER_LITERAL : (["0"-"9"])+ >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void Root() :{}{	{		fighter = new Fighter();	}	< IDENTIFIER > "{"		(AssignmentStatement())*		(BehaviourStatement())*	"}"}void AssignmentStatement() :{	Token identifier;	Token integerLiteral;}{  	identifier = < IDENTIFIER >  	"="  	integerLiteral = < INTEGER_LITERAL >	{		StrengthAssignment assignment = new StrengthAssignment(identifier.image, Integer.parseInt(integerLiteral.image));		fighter.getStatements().add(assignment);	}}void BehaviourStatement() :{  	Token identifier;  	Statement expression;  	Function move;  	Function attack;}{  	expression = LogicalExpr()  	"["  		move = FunctionCall()  		attack = FunctionCall()  	"]"  	{		Behaviour behaviour = new Behaviour(expression, move, attack);		fighter.getStatements().add(behaviour);  	}}Statement LogicalExpr() :{	Statement leftExpr;	Statement rightExpr;	Token identifier;	Token connective;}{  	// ( expr ) c expr	"("	leftExpr	= LogicalExpr()	")"	connective	= < CONNECTIVE >	rightExpr	= LogicalExpr()	{		if (connective.image.equals("or"))		{			return new OrOperator(leftExpr, rightExpr);		}	  	else if (connective.image.equals("and"))	  	{			return new AndOperator(leftExpr, rightExpr);	  	}	}	|	// ( expr c expr )  	"("  	leftExpr	= LogicalExpr()  	connective	= < CONNECTIVE >  	rightExpr	= LogicalExpr()  	")"	{		if (connective.image.equals("or"))		{			return new OrOperator(leftExpr, rightExpr);		}	  	else if (connective.image.equals("and"))	  	{			return new AndOperator(leftExpr, rightExpr);	  	}	}	|	// ( expr )  	"("  	leftExpr	= LogicalExpr()  	")"  	{		return leftExpr;  	} 	| 	// i c expr	identifier	= < IDENTIFIER >	connective	= < CONNECTIVE >	rightExpr	= LogicalExpr()  	{  	  	State state = new State(identifier.image);		if (connective.image.equals("or"))		{			return new OrOperator(state, rightExpr);		}	  	else if (connective.image.equals("and"))	  	{			return new AndOperator(state, rightExpr);	  	}  	} 	|  	identifier	= < IDENTIFIER >  	{		return new State(identifier.image);  	}}Function FunctionCall() :{  	Token identifier;  	Function param;}{  	identifier = < IDENTIFIER >  	{		Function function = new Function(identifier.image);  	}  	"("  	(  	  	param = FunctionCall()  		{  		  	function.addParameter(param);  		}  	)+  	")"  	{		return function;  	}  	| 	identifier = < IDENTIFIER >  	{		Function function = new Function(identifier.image);		return function;  	}}