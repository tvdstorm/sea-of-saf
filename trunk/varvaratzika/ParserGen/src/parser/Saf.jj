/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(SafParser)
package parser;
import objects.*;
import game.*;
import visualization.*;
import java.lang.String;
import java.util.ArrayList;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;

public class SafParser
{
  public static void main(String args []) throws ParseException
  {
	try
	{
		String path  = new java.io.File(".").getCanonicalPath();
        String FightersFile = "fighters.txt";
		InputStream stream = new FileInputStream(path + "/src/parser/" + FightersFile);
	  	SafParser parser = new SafParser(stream);
	  	System.out.println("Parsing is completed!!!!");
    	List<Fighter> f = parser.Start();
		Checker i = new Checker(f);
    	i.CheckInputs();
    	Fight saf=new Fight(f);
        saf.evaluateCondition();
        Animations a=new Animations(saf);
        a.startFight();
      	}
 	catch(Exception e)
 	{
 	    System.out.println("ERROR: " + e.getMessage());
        e.printStackTrace();
 	}
  }
}

PARSER_END(SafParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN :
{
  <PROP_VALUE :["1"-"9"]|"10">
| < #DIGIT : [ "0"-"9" ] >
| < CHOOSE :"choose">
| < OR:"OR" >
| < AND:"AND" >
| < #LETTER:["a"-"z"]|["A"-"Z"]>
| < IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_")* >
| < OP_BRACKETS: "[" >
| < CL_BRACKETS: "]" >
| < OP_ROUND_BRACKETS: "(" >
| < CL_ROUND_BRACKETS: ")" >
| < OP_CURLY_BRACKETS:"{" >
| < CL_CURLY_BRACKETS:"}" >
}


List<Fighter> Start() :
{
    Token fighterName  = new Token();
    Token strengthName = new Token();
    Token strengValue = new Token();
    List<Behavior> behaviors = new ArrayList<Behavior>();
    List<Fighter> fighters= new ArrayList<Fighter>();
    List<Strength> s=new ArrayList<Strength>();
}
{
    (
		(fighterName = <IDENTIFIER>{ Fighter f = new Fighter(fighterName.toString()); })
		<OP_CURLY_BRACKETS>
		(
			LOOKAHEAD( 2 )
			(strengthName = <IDENTIFIER>)
		  	<ASSIGN>
		  	(strengValue = <PROP_VALUE>)
		  	{s.add(new Strength(strengthName.toString(),Integer.valueOf(strengValue.toString())));}
			|
			LOOKAHEAD( 2 )
			(behaviors=behavior())
			{f.setBehaviors(behaviors);}
		)+
		<CL_CURLY_BRACKETS>
		{f.setStrengths(s);}
		{fighters.add(f);}
	)+
		<EOF>
		{return fighters;}
}
List<Behavior> behavior() :
 {
     Token conditionName = new Token();
     Token conditionName2 = new Token();
     Token movesName = new Token();
     Token attacksName = new Token();
     List conditionList=new ArrayList();
     List<Token> listMovesName = new ArrayList<Token>();
     List<Token> listAttacksName = new ArrayList<Token>();
     List<Behavior> returnedBehavior =new ArrayList<Behavior>();
     List<Move> move= new ArrayList<Move>();
     List<Attack> attack=new ArrayList<Attack>();
     Condition condition;

 }
 {
     (conditionName=<IDENTIFIER>)
     (
         (
			LOOKAHEAD( 2 )
			<OP_BRACKETS>			(move=moveContents())
			(attack=attackContents())
			<CL_BRACKETS>
			{condition=new SimpleCondition(conditionName.toString());}
			|
			LOOKAHEAD( 2 )
			<OR>
			(conditionName2=<IDENTIFIER>)
			<OP_BRACKETS>
			(move=moveContents())
			(attack=attackContents())
			<CL_BRACKETS>
			{condition=new Or(new SimpleCondition(conditionName.toString()),new SimpleCondition(conditionName2.toString()));}
			|
			LOOKAHEAD( 2 )
			<AND>
			(conditionName2=<IDENTIFIER>)
			<OP_BRACKETS>
			(move=moveContents())
			(attack=attackContents())
			<CL_BRACKETS>
			{condition=new And(new SimpleCondition(conditionName.toString()),new SimpleCondition(conditionName2.toString()));}
		)
		{		    for(Move m : move)
			{
			    for(Attack a : attack)
			    {					returnedBehavior.add(new Behavior(condition,m,a));
			    }			}
		}
	)+
	{return returnedBehavior; }

 }
List<Move> moveContents() :
 {
    Token movesName = new Token();
    List<Move> returnedMovesNames = new ArrayList<Move>();
 }
{
    (
		(movesName=<IDENTIFIER>{ returnedMovesNames.add(new Move(movesName.toString())); })
		|
		<CHOOSE>
		<OP_ROUND_BRACKETS>
		(
		    movesName=<IDENTIFIER>
			{returnedMovesNames.add(new Move(movesName.toString()));}
		)+
		<CL_ROUND_BRACKETS>
	)
    {return returnedMovesNames;}}
List<Attack> attackContents() :
 {
    Token attacksName = new Token();
    List<Attack> returnedAttacksNames = new ArrayList<Attack>();
}
{
    (
		(attacksName=<IDENTIFIER>)
		{returnedAttacksNames.add(new Attack(attacksName.toString()));}
		|
		<CHOOSE>
		<OP_ROUND_BRACKETS>
		(attacksName=<IDENTIFIER>{returnedAttacksNames.add(new Attack(attacksName.toString()));})+
		<CL_ROUND_BRACKETS>
	)
	{return returnedAttacksNames;}
}


