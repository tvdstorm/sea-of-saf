/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

options
{
  JDK_VERSION = "1.5";
  static = true;
} 

PARSER_BEGIN(SafParser)
package parser;
import objects.*;
import java.lang.String;
import java.util.ArrayList;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;

public class SafParser
{
  public static void main(String args []) throws ParseException
  {
	try
	{
		String path  = new java.io.File(".").getCanonicalPath();
        String FightersFile = "fighters.txt";
		InputStream stream = new FileInputStream(path + "/src/parser/" + FightersFile);
	  	SafParser parser = new SafParser(stream);
    	ArrayList<Fighter> f = parser.Start();
		Interpreter i = new Interpreter(f);
    	i.Interpret();
    	visualize(f);
     	}
 	catch(Exception e)
 	{
 	  System.out.println("Exception:"+e);
 	}        
  }
}

PARSER_END(SafParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN :
{
  <PROP_VALUE :["1"-"9"]|"10">
| < #DIGIT : [ "0"-"9" ] >
| < CHOOSE :"choose">
| < OR:"OR" >
| < AND:"AND" >
| < #LETTER:["a"-"z"]|["A"-"Z"]>
| < IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_")* >
| < OP_BRACKETS: "[" >
| < CL_BRACKETS: "]" >
| < OP_ROUND_BRACKETS: "(" >
| < CL_ROUND_BRACKETS: ")" >
| < OP_CURLY_BRACKETS:"{" >
| < CL_CURLY_BRACKETS:"}" >
}


ArrayList<Fighter> Start() :
{
    Token fighterName  = new Token();
    Token strengthName = new Token();
    Token strengValue = new Token();
    ArrayList<Fighter> fighters = new ArrayList<Fighter>();
    ArrayList<Condition> conditions = new ArrayList<Condition>();
}
{
    (
	    LOOKAHEAD( 2 )
		(fighterName = <IDENTIFIER>)
		<OP_CURLY_BRACKETS>		{Fighter f = new Fighter(fighterName.toString());}
		(
		LOOKAHEAD( 2 )
		(strengthName=<IDENTIFIER>)
	  	<ASSIGN>
	  	(strengValue=<PROP_VALUE>)
	  	{f.setStrength(new Strength(strengthName.toString(),Integer.valueOf(strengValue.toString())));}
		|
		LOOKAHEAD( 2 )
		(conditions=searchForAndOrInConditions())
		{f.setConditions(conditions);}
		)+   
		<CL_CURLY_BRACKETS>
		{fighters.add(f);}
	)+
		<EOF>
		{return fighters;}
	
}

ArrayList<Condition> searchForAndOrInConditions() :
 {
     Token conditionName = new Token();
     Token movesName = new Token();
     Token attacksName = new Token();
     Token conditionNameOr = new Token();
     Token conditionNameAnd = new Token();
     ArrayList conditionList=new ArrayList();
     List<Token> listMovesName = new ArrayList<Token>();
     List<Token> listAttacksName = new ArrayList<Token>();
     ArrayList<Condition> returnedCondition =new ArrayList<Condition>();
     int id=1;
  
 }
 {
       (
		LOOKAHEAD( 2 )
		(conditionName=<IDENTIFIER>)
		<OP_BRACKETS>
		(returnedCondition=conditions(conditionName,0,new Token()))
		<CL_BRACKETS>
		|   
		LOOKAHEAD( 2 )
		(conditionName=<IDENTIFIER>)
		<OR>
		(conditionNameOr=<IDENTIFIER>)
		<OP_BRACKETS>
		(returnedCondition=conditions(conditionName,0,conditionNameOr))
		<CL_BRACKETS>
		|
		LOOKAHEAD( 2 )
		(conditionName=<IDENTIFIER>)
		<AND>
		(conditionNameAnd=<IDENTIFIER>)
		<OP_BRACKETS>
		(returnedCondition=conditions(conditionName,id,conditionNameAnd))
		<CL_BRACKETS>  
	)+
	{return returnedCondition; }
 
 }

 
ArrayList<Condition> conditions(Token conditionName,int id,Token conditionName2nd) :
{
    Token movesName = new Token();
    Token attacksName = new Token();
    ArrayList<Condition> returnedCondition = new ArrayList<Condition>();
    List<Token > listAttacksName = new ArrayList<Token>();
    List<Token > listMovesName = new ArrayList<Token>();}
{
    (
   		LOOKAHEAD( 2 )
   		(movesName=<IDENTIFIER>)
   		(attacksName=<IDENTIFIER>)
		{	if(id==0){returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));}
			else
			{returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));
			 returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));
			}
		}
		|
		LOOKAHEAD( 2 )
        (movesName = <IDENTIFIER>)
        (attacksName = <IDENTIFIER>)	
		{
		    if(id==0){returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));}
		    else
		    {returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));
			 returnedCondition.add(new Condition(conditionName2nd.toString(),movesName.toString(),attacksName.toString(),id));
			}
		}
		|
		LOOKAHEAD( 2 )
		(movesName=<IDENTIFIER>)
		<CHOOSE>
		<OP_ROUND_BRACKETS>
		(attacksName=<IDENTIFIER>{listAttacksName.add(attacksName);})+
		<CL_ROUND_BRACKETS>
		{
		     for(Token oneOfListAttacks: listAttacksName)
				{
					if(id==0){returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));}
					else
					{
			 			returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));
			 			returnedCondition.add(new Condition(conditionName2nd.toString(),movesName.toString(),attacksName.toString(),id));
			 		}
			    }
			}
		|   
		LOOKAHEAD( 2 )
		<CHOOSE>
		<OP_ROUND_BRACKETS>
		(movesName=<IDENTIFIER>{listMovesName.add(movesName);})+
		<CL_ROUND_BRACKETS>
		(attacksName=<IDENTIFIER>)		
		{
		    for(Token oneOfListMoves: listMovesName)
		    {
				if(id==0){returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));}
				else
				{
			 		returnedCondition.add(new Condition(conditionName2nd.toString(),movesName.toString(),attacksName.toString(),id));
					returnedCondition.add(new Condition(conditionName2nd.toString(),movesName.toString(),attacksName.toString(),id));
				}

			 }
		}
		|   
        LOOKAHEAD( 2 )
        <CHOOSE>
        <OP_ROUND_BRACKETS>
        (movesName=<IDENTIFIER>{listMovesName.add(movesName);})+
        <CL_ROUND_BRACKETS>
        <CHOOSE>
        <OP_ROUND_BRACKETS>
        (attacksName=<IDENTIFIER>{listAttacksName.add(attacksName);})+
        <CL_ROUND_BRACKETS>
		{
		    for(Token oneOfListMoves: listMovesName)
			{
			    for(Token oneOfListAttacks: listAttacksName)
				{
					if(id==0)
			 		{returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));}
					else
					{returnedCondition.add(new Condition(conditionName.toString(),movesName.toString(),attacksName.toString(),id));
			 		 returnedCondition.add(new Condition(conditionName2nd.toString(),movesName.toString(),attacksName.toString(),id));
					}
			    
			    }
			}
		}  
		)+
		{return returnedCondition;}
}





		   