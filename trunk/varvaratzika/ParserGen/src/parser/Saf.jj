/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Saf.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

options
{
  JDK_VERSION = "1.5";
  static = true;
} 

PARSER_BEGIN(SafParser)
package parser;
import objects.*;
import java.lang.String;
import java.util.ArrayList;

public class SafParser/*@bgen(jjtree)*/implements SafParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSafParserState jjtree = new JJTSafParserState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
	try
	{
	  	SafParser parser = new SafParser(System.in);
    	ArrayList<Fighter> f = parser.Start();
    	Interpreter i = new Interpreter(f);
    	i.Interpret();
  	}
 	catch(Exception e)
 	{
 	  System.out.println("Exception:"+e); 	}        
  }
}

PARSER_END(SafParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN :
{
  <PROP_VALUE :["1"-"9"]|"10">
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER:["a"-"z"]|["A"-"Z"]>
| < IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)* >
| < OP_BRACKETS: "[" >
| < CL_BRACKETS: "]" >
| < OP_CURLY_BRACKETS:"{" >
| < CL_CURLY_BRACKETS:"}" >
}


ArrayList<Fighter> Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token Fighter1  = new Token();
  Token Fighter2 = new Token();
  Fighter f1 = new Fighter();
  Fighter f2 = new Fighter();
  ArrayList<Fighter> fighters = new ArrayList<Fighter>();
}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/ 
  (Fighter1 = <IDENTIFIER>)<OP_CURLY_BRACKETS>(f1 = contents(f1))<CL_CURLY_BRACKETS>
  {
    f1.setFighterName(Fighter1.toString());
    fighters.add(f1);
  }
	(Fighter2 = <IDENTIFIER>)<OP_CURLY_BRACKETS>(f2=contents(f2))<CL_CURLY_BRACKETS>
	{
	    f2.setFighterName(Fighter2.toString());
	   	fighters.add(f2);
	}/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { return fighters; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Fighter contents(Fighter f) :
 {/*@bgen(jjtree) contents */
   SimpleNode jjtn000 = new SimpleNode(JJTCONTENTS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Strength s1=new Strength();
   Condition c1=new Condition();
   Token strengthName,strengValue,conditionName,movesName,attacksName=new Token(); }
 {/*@bgen(jjtree) contents */
   try {
/*@egen*/
   (
  		LOOKAHEAD( 2 )(strengthName=<IDENTIFIER>)<ASSIGN>(strengValue=<PROP_VALUE>)
  		{
  		  s1.setStrengthName(strengthName.toString());
  		  s1.setStrenghtValue(Integer.valueOf(strengValue.toString()));
  		  f.setStrength(s1);  		}
  		|
		LOOKAHEAD( 2 )(conditionName=<IDENTIFIER>)<OP_BRACKETS>(movesName=<IDENTIFIER>)(attacksName=<IDENTIFIER>)<CL_BRACKETS>
		{
		  c1.setConditionName(conditionName.toString());
		  c1.setMovesName(movesName.toString());
		  c1.setAttacksName(attacksName.toString());
		  f.setCondition(c1);		}
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{return f; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 
 }
 



