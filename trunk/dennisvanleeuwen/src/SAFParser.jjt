options {	MULTI=false; /* This is because now all of the nodes will be an instance of a derived class of SimpleNode instead of an instance of SimpleNode */	NODE_PREFIX="";}PARSER_BEGIN(SAFParser)//package Parser;import java.io.*;import java.util.List;import java.util.ArrayList;import saf.*;import saf.astelements.*;import saf.astelements.actions.*;import saf.astelements.conditions.*;import saf.astvisitors.*;import mvc.*;import mvc.controllers.SimpleFightController;import mvc.models.FighterModel;import mvc.views.SimpleFightView;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import javax.swing.JApplet;import javax.swing.JFrame;/* *	TODO: Default element staat er nu 3 keer in. *		  Nog een keer goed naar de naming kijken en upper lowercase * 		  Grammatica altijd return values specificieren ipv void. *		  Characteristics oook 1 per class en niet als strings... *		  Misschien de nodes eerst maken en dan met factory method er echt * 		  classes van maken zodat er geen default is! Tenminste geen default tijdens de *		  grafische simulatie, maar alleen als node in de AST *		  Alleen getters in AST Node klasses. *		  File inlezen via argument via main()... * 		  gramar 2 action, fight en move, in 1 keer afhandelen? *		  haakjes bij and en or conditions */public class SAFParser {		public static void main(String args[]) throws ParseException {		try {			initializeFactories();					  			InputStream inputStream = new FileInputStream("N:/SoftwareConstruction/SVN/dennisvanleeuwen/src/robots.prgm");			SAFParser parser = new SAFParser(inputStream);			//Start parsing the file			Arena arena = parser.Parse();			inputStream.close();			System.out.println(PrintingVisitor.print(arena));				List<String> errors = ValidationVisitor.check(arena);						if(!errors.isEmpty()){				for(String error: errors)					System.out.println(error);			}			else{				System.out.println("Succesfully parsed!");//        		FighterModel fighterModel1 = FighterModel.createFighterModel(arena.getFighters().get(0).getName(), //																	    arena.getFighters().get(0).getCharacteristics(),//																	    arena.getFighters().get(0).getRules(), -1);//				FighterModel fighterModel2 = FighterModel.createFighterModel(arena.getFighters().get(1).getName(), //											   						    arena.getFighters().get(1).getCharacteristics(),//											   						    arena.getFighters().get(1).getRules(), 0);	//                //                SimpleFightView simpleFightView = new SimpleFightView(fighterModel1, fighterModel2);//                IController fightController = new SimpleFightController(fighterModel1, fighterModel2, simpleFightView);//                fightController.run();			}					} catch (Exception e) {			System.out.println("Exception during parsing: " + e.getMessage());		}	}	private static void initializeFactories() throws Exception{//		ConditionFactory.getInstance().addElementFactory("always", "saf.astelements.conditions.Always");//		ConditionFactory.getInstance().addElementFactory("far", "saf.astelements.conditions.Far");//		ConditionFactory.getInstance().addElementFactory("much_stronger", "saf.astelements.conditions.strength.MuchStronger");//		ConditionFactory.getInstance().addElementFactory("much_weaker", "saf.astelements.conditions.strength.MuchWeaker");//		ConditionFactory.getInstance().addElementFactory("near", "saf.astelements.conditions.Near");//		ConditionFactory.getInstance().addElementFactory("stronger", "saf.astelements.conditions.strength.Stronger");//		ConditionFactory.getInstance().addElementFactory("weaker", "saf.astelements.conditions.strength.Weaker");//	//		MoveActionFactory.getInstance().addElementFactory("crouch", "saf.astelements.actions.move.Crouch");//		MoveActionFactory.getInstance().addElementFactory("jump", "saf.astelements.actions.move.Jump");//		MoveActionFactory.getInstance().addElementFactory("run_away", "saf.astelements.actions.move.RunAway");//		MoveActionFactory.getInstance().addElementFactory("run_towards", "saf.astelements.actions.move.RunTowards");//		MoveActionFactory.getInstance().addElementFactory("stand", "saf.astelements.actions.move.Stand");//		MoveActionFactory.getInstance().addElementFactory("walk_away", "saf.astelements.actions.move.WalkAway");//		MoveActionFactory.getInstance().addElementFactory("walk_towards", "saf.astelements.actions.move.WalkTowards");//		//		FightActionFactory.getInstance().addElementFactory("punch_low", "saf.astelements.actions.fight.PunchLow");//		FightActionFactory.getInstance().addElementFactory("punch_high", "saf.astelements.actions.fight.PunchHigh");//		FightActionFactory.getInstance().addElementFactory("kick_low", "saf.astelements.actions.fight.KickLow");//		FightActionFactory.getInstance().addElementFactory("kick_high", "saf.astelements.actions.fight.KickHigh");//		FightActionFactory.getInstance().addElementFactory("block_low", "saf.astelements.actions.fight.BlockLow");//		FightActionFactory.getInstance().addElementFactory("block_high", "saf.astelements.actions.fight.BlockHigh");/* * TODO? *	Class<?> class1; * 	try { *	    class1 = Class.forName(CLASS); *	    Method method = class1.getMethod(METHOD, String.class); *	    Object o = method.invoke(null, NAME); *	    System.out.println(o); *	http://www.wikijava.org/wiki/Class_and_static_Method_Reflection_example * Reflection and virtual functions :) */	}}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN: /* AND/OR 's */{		< OR: "or" >	|	< AND: "and" >	|   < CHOOSE: "choose" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: (<LETTER> | "_")+ >	|	< NUMBER: (["1" - "9"])+ >	|	< LETTER: ["a"-"z","A"-"Z"] >}/** Root */Arena Parse():{	List<Fighter> fighters = new ArrayList<Fighter>();	Fighter fighter = null;}{  	(fighter = Fighter())+ 	<EOF>  	{  	  System.out.println("robot");		{			fighters.add(fighter);		}	}	{		return new Arena(fighters);	}}Fighter Fighter():{	String name = "";	List<Characteristic> chars = new ArrayList<Characteristic>();	Characteristic characteristic = null;	List<Rule> rules = new ArrayList<Rule>();	Rule rule = null;}{	( name = FighterName())	"{"//			( LOOKAHEAD(2)//				  	( rule = Rule() )//				  	{//				  		rules.add(rule);//				  	}//				|	( characteristic = Characteristic() )//					{//						chars.add(characteristic);//					}//			)*	"}"	{		return new Fighter(name, chars, rules);	}}//void FighterProperties(Fighter fighter)://{}//{//	(FighterProperty(fighter))*//}////void FighterProperty(Fighter fighter)://{}{//  	LOOKAHEAD(2)/* NEEDED because both character and rule start with a identifier!*///		Rule(fighter)//	|	Characteristic(fighter)//}Characteristic Characteristic() :{	String item = "";	Integer value = 0; }{	( item = CharacteristicItem() ) "=" ( value = CharacteristicValue() )	{		return new Characteristic(item, value);	}	  }Rule Rule() :{	ICondition condition = null;	IAction action1 = null;	IAction action2 = null;}{	( condition = ConditionTypes() ) "[" ( action1 = ActionTypes() ) ( action2 = ActionTypes() ) "]" 	{		return new Rule(condition, action1, action2);	}}ICondition ConditionTypes() :{	ICondition condition = null;}{	condition = ORConditionType()	{		return condition;	} }/* * AND has a higher priority than OR http://en.wikipedia.org/wiki/Logical_connective * Therefore AND is lower in the AST.*/ICondition ORConditionType():{	ICondition condition1 = null;	ICondition condition2 = null;}{	condition1 = ANDConditionType() ( LOOKAHEAD(2) < OR > condition2 = ORConditionType())*	{		return ((condition2 == null)? condition1: new ORConditionComposite(condition1, condition2));	}}ICondition ANDConditionType():{	ICondition condition1 = null;	ICondition condition2 = null;}{	condition1 = ConditionType() (LOOKAHEAD(2) < AND > condition2 = ANDConditionType())*	{		return ((condition2 == null)?condition1: new ANDConditionComposite(condition1, condition2));	}}IAction ActionTypes():{	IAction action = null;}{ 	( action = ActionType() )	{		return action;	}| 	( action = ChooseActionType() )	{		return action;	}}IAction ChooseActionType():{	List<IAction> actions = new ArrayList<IAction>();	IAction action = null;}{	< CHOOSE >	"("	(action = ActionTypes())+	{		{			actions.add(action);		}	}	")"	{		return new ChooseActionComposite(actions);	}	  }IAction ActionType():{	Token t;}{ 	t = < IDENTIFIER >	{		return new saf.astelements.actions.Simple(t.image);	}}String FighterName():{	Token t;}{    	t = < IDENTIFIER >	{		return t.image;	}}String CharacteristicItem():{	Token t;}{	t = < IDENTIFIER >	{		return t.image;	}}Integer CharacteristicValue():{	Token t;}{	t = < NUMBER >	{		return Integer.parseInt(t.image);	}}ICondition ConditionType():{	Token t;}{	t = < IDENTIFIER >	{		return new saf.astelements.conditions.Simple(t.image);	}	}