options {	MULTI=false; /* This is because now all of the nodes will be an instance of a derived class of SimpleNode instead of an instance of SimpleNode */	NODE_PREFIX="";}PARSER_BEGIN(SAFParser)//package Parser;import java.io.*;import java.util.List;import saf.*;import saf.astelements.*;import saf.astelements.actions.*;import saf.astelements.conditions.*;import saf.astelements.actions.fight.*;import saf.astelements.actions.move.*;import saf.elementfactories.*;import saf.astvisitors.*;import mvc.*;import mvc.controllers.SimpleFightController;import mvc.models.FighterModel;import mvc.views.SimpleFightView;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import javax.swing.JApplet;import javax.swing.JFrame;/* *	TODO: Default element staat er nu 3 keer in. *		  Nog een keer goed naar de naming kijken en upper lowercase * 		  Grammatica altijd return values specificieren ipv void. *		  Characteristics oook 1 per class en niet als strings... *		  Misschien de nodes eerst maken en dan met factory method er echt * 		  classes van maken zodat er geen default is! Tenminste geen default tijdens de *		  grafische simulatie, maar alleen als node in de AST *		  Alleen getters in AST Node klasses. *		  File inlezen via argument via main()... * 		  gramar 2 action, fight en move, in 1 keer afhandelen? *		  haakjes bij and en or conditions */public class SAFParser {		public static void main(String args[]) throws ParseException {		try {			initializeFactories();					  			InputStream inputStream = new FileInputStream("N:/SoftwareConstruction/SVN/dennisvanleeuwen/src/robots.prgm");			SAFParser parser = new SAFParser(inputStream);			//Start parsing the file			Arena arena = parser.Parse();			inputStream.close();			//System.out.println(PrintingVisitor.print(arena));	//			List<String> errors = ValidationVisitor.check(arena);//			//			if(!errors.isEmpty()){//				for(String error: errors)//					System.out.println(error);//			}//			else{				System.out.println("Succesfully parsed!");//        		FighterModel fighterModel1 = FighterModel.createFighterModel(arena.getFighters().get(0).getName(), //																	    arena.getFighters().get(0).getCharacteristics(),//																	    arena.getFighters().get(0).getRules(), -1);//				FighterModel fighterModel2 = FighterModel.createFighterModel(arena.getFighters().get(1).getName(), //											   						    arena.getFighters().get(1).getCharacteristics(),//											   						    arena.getFighters().get(1).getRules(), 0);	//                //                SimpleFightView simpleFightView = new SimpleFightView(fighterModel1, fighterModel2);//                IController fightController = new SimpleFightController(fighterModel1, fighterModel2, simpleFightView);//                fightController.run();//			}					} catch (Exception e) {			System.out.println("Exception during parsing: " + e.getMessage());		}	}	private static void initializeFactories() throws Exception{		ConditionFactory.getInstance().addElementFactory("always", "saf.astelements.conditions.Always");		ConditionFactory.getInstance().addElementFactory("far", "saf.astelements.conditions.Far");		ConditionFactory.getInstance().addElementFactory("much_stronger", "saf.astelements.conditions.strength.MuchStronger");		ConditionFactory.getInstance().addElementFactory("much_weaker", "saf.astelements.conditions.strength.MuchWeaker");		ConditionFactory.getInstance().addElementFactory("near", "saf.astelements.conditions.Near");		ConditionFactory.getInstance().addElementFactory("stronger", "saf.astelements.conditions.strength.Stronger");		ConditionFactory.getInstance().addElementFactory("weaker", "saf.astelements.conditions.strength.Weaker");			MoveActionFactory.getInstance().addElementFactory("crouch", "saf.astelements.actions.move.Crouch");		MoveActionFactory.getInstance().addElementFactory("jump", "saf.astelements.actions.move.Jump");		MoveActionFactory.getInstance().addElementFactory("run_away", "saf.astelements.actions.move.RunAway");		MoveActionFactory.getInstance().addElementFactory("run_towards", "saf.astelements.actions.move.RunTowards");		MoveActionFactory.getInstance().addElementFactory("stand", "saf.astelements.actions.move.Stand");		MoveActionFactory.getInstance().addElementFactory("walk_away", "saf.astelements.actions.move.WalkAway");		MoveActionFactory.getInstance().addElementFactory("walk_towards", "saf.astelements.actions.move.WalkTowards");				FightActionFactory.getInstance().addElementFactory("punch_low", "saf.astelements.actions.fight.PunchLow");		FightActionFactory.getInstance().addElementFactory("punch_high", "saf.astelements.actions.fight.PunchHigh");		FightActionFactory.getInstance().addElementFactory("kick_low", "saf.astelements.actions.fight.KickLow");		FightActionFactory.getInstance().addElementFactory("kick_high", "saf.astelements.actions.fight.KickHigh");		FightActionFactory.getInstance().addElementFactory("block_low", "saf.astelements.actions.fight.BlockLow");		FightActionFactory.getInstance().addElementFactory("block_high", "saf.astelements.actions.fight.BlockHigh");	}}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN: /* AND/OR 's */{		< OR: "or" >	|	< AND: "and" >	|   < CHOOSE: "choose" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: (<LETTER> | "_")+ >	|	< NUMBER: (["1" - "9"])+ >	|	< LETTER: ["a"-"z","A"-"Z"] >}/** Root */Arena Parse():{Arena arena = new Arena(); }{	(Fighter(arena))+ <EOF>	{ return arena; }}void Fighter(Arena arena):{Fighter fighter = new Fighter();}{	FighterName(fighter) "{" FighterProperties(fighter) "}"	{ arena.addFighter(fighter); }}void FighterProperties(Fighter fighter):{}{	(FighterProperty(fighter))*}void FighterProperty(Fighter fighter):{}{  	LOOKAHEAD(2)/* NEEDED because both character and rule start with a identifier!*/		Rule(fighter)	|	Characteristic(fighter)}void Characteristic(Fighter fighter) :{ Characteristic characteristic = new Characteristic(); }{	CharacteristicItem(characteristic) "=" CharacteristicValue(characteristic)	{ fighter.addCharacteristic(characteristic); }	  }void Rule(Fighter fighter) :{ Rule rule = new Rule();}{	ConditionTypes(rule) "[" MoveActionTypes(rule) FightActionTypes(rule) "]" 	{ fighter.addRule(rule); }}void ConditionTypes(Rule rule) :{ ICondition condition = null; }{	condition = ANDConditionType()	{ rule.setCondition(condition); } }/* * AND has a higher priority than OR http://en.wikipedia.org/wiki/Logical_connective * Therefore AND is lower in the AST.*/ICondition ORConditionType():{ ICondition condition1 = null;							   ICondition condition2 = null; }{	condition1 = ANDConditionType() ( LOOKAHEAD(2) < OR > condition2 = ORConditionType())*	{		return ((condition2 == null)? condition1: new ORConditionComposite(condition1, condition2));	}}ICondition ANDConditionType():{ ICondition condition1 = null;						  ICondition condition2 = null; }{	condition1 = ConditionType() (LOOKAHEAD(2) < AND > condition2 = ANDConditionType())*	{		return ((condition2 == null)?condition1: new ANDConditionComposite(condition1, condition2));	}}void MoveActionTypes(Rule rule):{ IAction moveAction = null; }{ 		moveAction = MoveActionType()		{ rule.setMoveAction(moveAction); }	| 	moveAction = ChooseMoveActionType()		{ rule.setMoveAction(moveAction); }}void FightActionTypes(Rule rule):{ IAction fightAction = null; }{ 		fightAction = FightActionType()		{ rule.setFightAction(fightAction); }	| 	fightAction = ChooseFightActionType()		{ rule.setFightAction(fightAction); }}IAction ChooseMoveActionType():{ ChooseActionComposite chooseAction = new ChooseActionComposite(); }{	< CHOOSE > "(" (PreMoveActionType(chooseAction))+ ")"	{ return chooseAction; }	  }IAction ChooseFightActionType():{ ChooseActionComposite chooseAction = new ChooseActionComposite(); }{	< CHOOSE > "(" (PreFightActionType(chooseAction))+ ")"	{ return chooseAction; }}void PreMoveActionType(ChooseActionComposite chooseAction):{ IAction action = null; }{	action = MoveActionType()	{ chooseAction.addAction(action); }}void PreFightActionType(ChooseActionComposite chooseAction):{ IAction action = null; }{	action = FightActionType()	{ chooseAction.addAction(action); }}IAction FightActionType():{ Token t; }{ 	t = < IDENTIFIER >	{ return FightActionFactory.getInstance().create(t.image); }}IAction MoveActionType():{ Token t; }{ 	t = < IDENTIFIER >	{ return MoveActionFactory.getInstance().create(t.image); }}void FighterName(Fighter fighter):{ Token t; }{    	t = < IDENTIFIER >	{ fighter.setName(t.image); }}void CharacteristicItem(Characteristic characteristic):{ Token t; }{	t = < IDENTIFIER >	{ characteristic.item = t.image; }}void CharacteristicValue(Characteristic characteristic):{ Token t; }{	t = < NUMBER >	{ characteristic.value = Integer.parseInt(t.image); }}ICondition ConditionType():{ Token t; }{	t = < IDENTIFIER >	{ return ConditionFactory.getInstance().create(t.image); }	}