/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.analysis;

import java.util.*;
import saf.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAProgramHeader(AProgramHeader node)
    {
        defaultCase(node);
    }

    public void caseAProgramFooter(AProgramFooter node)
    {
        defaultCase(node);
    }

    public void caseAProgramPersonality(AProgramPersonality node)
    {
        defaultCase(node);
    }

    public void caseAPunchReachProgramCharacteristic(APunchReachProgramCharacteristic node)
    {
        defaultCase(node);
    }

    public void caseAPunchPowerProgramCharacteristic(APunchPowerProgramCharacteristic node)
    {
        defaultCase(node);
    }

    public void caseAKickReachProgramCharacteristic(AKickReachProgramCharacteristic node)
    {
        defaultCase(node);
    }

    public void caseAKickPowerProgramCharacteristic(AKickPowerProgramCharacteristic node)
    {
        defaultCase(node);
    }

    public void caseAProgramPunchReach(AProgramPunchReach node)
    {
        defaultCase(node);
    }

    public void caseAProgramPunchPower(AProgramPunchPower node)
    {
        defaultCase(node);
    }

    public void caseAProgramKickReach(AProgramKickReach node)
    {
        defaultCase(node);
    }

    public void caseAProgramKickPower(AProgramKickPower node)
    {
        defaultCase(node);
    }

    public void caseAProgramBehaviour(AProgramBehaviour node)
    {
        defaultCase(node);
    }

    public void caseAProgramRule(AProgramRule node)
    {
        defaultCase(node);
    }

    public void caseASingleMoveActionProgramMoveAction(ASingleMoveActionProgramMoveAction node)
    {
        defaultCase(node);
    }

    public void caseAChooseMoveActionProgramMoveAction(AChooseMoveActionProgramMoveAction node)
    {
        defaultCase(node);
    }

    public void caseASingleFightActionProgramFightAction(ASingleFightActionProgramFightAction node)
    {
        defaultCase(node);
    }

    public void caseAChooseFightActionProgramFightAction(AChooseFightActionProgramFightAction node)
    {
        defaultCase(node);
    }

    public void caseAWalkTowardsMoveActionType(AWalkTowardsMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseAWalkAwayMoveActionType(AWalkAwayMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseARunTowardsMoveActionType(ARunTowardsMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseARunAwayMoveActionType(ARunAwayMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseAJumpMoveActionType(AJumpMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseACrouchMoveActionType(ACrouchMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseAStandMoveActionType(AStandMoveActionType node)
    {
        defaultCase(node);
    }

    public void caseABlockLowFightActionType(ABlockLowFightActionType node)
    {
        defaultCase(node);
    }

    public void caseABlockHighFightActionType(ABlockHighFightActionType node)
    {
        defaultCase(node);
    }

    public void caseAPunchLowFightActionType(APunchLowFightActionType node)
    {
        defaultCase(node);
    }

    public void caseAPunchHighFightActionType(APunchHighFightActionType node)
    {
        defaultCase(node);
    }

    public void caseAKickLowFightActionType(AKickLowFightActionType node)
    {
        defaultCase(node);
    }

    public void caseAKickHighFightActionType(AKickHighFightActionType node)
    {
        defaultCase(node);
    }

    public void caseAAlwaysConditionType(AAlwaysConditionType node)
    {
        defaultCase(node);
    }

    public void caseANearConditionType(ANearConditionType node)
    {
        defaultCase(node);
    }

    public void caseAFarConditionType(AFarConditionType node)
    {
        defaultCase(node);
    }

    public void caseAMuchStrongerConditionType(AMuchStrongerConditionType node)
    {
        defaultCase(node);
    }

    public void caseAStrongerConditionType(AStrongerConditionType node)
    {
        defaultCase(node);
    }

    public void caseAEvenConditionType(AEvenConditionType node)
    {
        defaultCase(node);
    }

    public void caseAWeakerConditionType(AWeakerConditionType node)
    {
        defaultCase(node);
    }

    public void caseAMuchWeakerConditionType(AMuchWeakerConditionType node)
    {
        defaultCase(node);
    }

    public void caseTDigit(TDigit node)
    {
        defaultCase(node);
    }

    public void caseTLetter(TLetter node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTNewline(TNewline node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTCurlybracel(TCurlybracel node)
    {
        defaultCase(node);
    }

    public void caseTCurlybracer(TCurlybracer node)
    {
        defaultCase(node);
    }

    public void caseTBracketl(TBracketl node)
    {
        defaultCase(node);
    }

    public void caseTBracketr(TBracketr node)
    {
        defaultCase(node);
    }

    public void caseTParenthesisl(TParenthesisl node)
    {
        defaultCase(node);
    }

    public void caseTParenthesisr(TParenthesisr node)
    {
        defaultCase(node);
    }

    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    public void caseTPunchReach(TPunchReach node)
    {
        defaultCase(node);
    }

    public void caseTPunchPower(TPunchPower node)
    {
        defaultCase(node);
    }

    public void caseTKickReach(TKickReach node)
    {
        defaultCase(node);
    }

    public void caseTKickPower(TKickPower node)
    {
        defaultCase(node);
    }

    public void caseTChoose(TChoose node)
    {
        defaultCase(node);
    }

    public void caseTWalkTowards(TWalkTowards node)
    {
        defaultCase(node);
    }

    public void caseTWalkAway(TWalkAway node)
    {
        defaultCase(node);
    }

    public void caseTRunTowards(TRunTowards node)
    {
        defaultCase(node);
    }

    public void caseTRunAway(TRunAway node)
    {
        defaultCase(node);
    }

    public void caseTJump(TJump node)
    {
        defaultCase(node);
    }

    public void caseTCrouch(TCrouch node)
    {
        defaultCase(node);
    }

    public void caseTStand(TStand node)
    {
        defaultCase(node);
    }

    public void caseTAlways(TAlways node)
    {
        defaultCase(node);
    }

    public void caseTNear(TNear node)
    {
        defaultCase(node);
    }

    public void caseTFar(TFar node)
    {
        defaultCase(node);
    }

    public void caseTMuchStronger(TMuchStronger node)
    {
        defaultCase(node);
    }

    public void caseTStronger(TStronger node)
    {
        defaultCase(node);
    }

    public void caseTEven(TEven node)
    {
        defaultCase(node);
    }

    public void caseTWeaker(TWeaker node)
    {
        defaultCase(node);
    }

    public void caseTMuchWeaker(TMuchWeaker node)
    {
        defaultCase(node);
    }

    public void caseTBlockLow(TBlockLow node)
    {
        defaultCase(node);
    }

    public void caseTBlockHigh(TBlockHigh node)
    {
        defaultCase(node);
    }

    public void caseTPunchLow(TPunchLow node)
    {
        defaultCase(node);
    }

    public void caseTPunchHigh(TPunchHigh node)
    {
        defaultCase(node);
    }

    public void caseTKickLow(TKickLow node)
    {
        defaultCase(node);
    }

    public void caseTKickHigh(TKickHigh node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
