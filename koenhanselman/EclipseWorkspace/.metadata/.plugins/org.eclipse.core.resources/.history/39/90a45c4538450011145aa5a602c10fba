/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.analysis;

import java.util.*;
import saf.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getProgramHeader() != null)
        {
            node.getProgramHeader().apply(this);
        }
        if(node.getProgramPersonality() != null)
        {
            node.getProgramPersonality().apply(this);
        }
        if(node.getProgramBehaviour() != null)
        {
            node.getProgramBehaviour().apply(this);
        }
        if(node.getProgramFooter() != null)
        {
            node.getProgramFooter().apply(this);
        }
        outAProgram(node);
    }

    public void inAProgramHeader(AProgramHeader node)
    {
        defaultIn(node);
    }

    public void outAProgramHeader(AProgramHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramHeader(AProgramHeader node)
    {
        inAProgramHeader(node);
        {
            List<TLetter> copy = new ArrayList<TLetter>(node.getLetter());
            for(TLetter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCurlybracel() != null)
        {
            node.getCurlybracel().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramHeader(node);
    }

    public void inAProgramFooter(AProgramFooter node)
    {
        defaultIn(node);
    }

    public void outAProgramFooter(AProgramFooter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramFooter(AProgramFooter node)
    {
        inAProgramFooter(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getCurlybracer() != null)
        {
            node.getCurlybracer().apply(this);
        }
        outAProgramFooter(node);
    }

    public void inAProgramPersonality(AProgramPersonality node)
    {
        defaultIn(node);
    }

    public void outAProgramPersonality(AProgramPersonality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramPersonality(AProgramPersonality node)
    {
        inAProgramPersonality(node);
        {
            List<PProgramCharacteristic> copy = new ArrayList<PProgramCharacteristic>(node.getProgramCharacteristic());
            for(PProgramCharacteristic e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramPersonality(node);
    }

    public void inAPunchReachProgramCharacteristic(APunchReachProgramCharacteristic node)
    {
        defaultIn(node);
    }

    public void outAPunchReachProgramCharacteristic(APunchReachProgramCharacteristic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunchReachProgramCharacteristic(APunchReachProgramCharacteristic node)
    {
        inAPunchReachProgramCharacteristic(node);
        if(node.getProgramPunchReach() != null)
        {
            node.getProgramPunchReach().apply(this);
        }
        outAPunchReachProgramCharacteristic(node);
    }

    public void inAPunchPowerProgramCharacteristic(APunchPowerProgramCharacteristic node)
    {
        defaultIn(node);
    }

    public void outAPunchPowerProgramCharacteristic(APunchPowerProgramCharacteristic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunchPowerProgramCharacteristic(APunchPowerProgramCharacteristic node)
    {
        inAPunchPowerProgramCharacteristic(node);
        if(node.getProgramPunchPower() != null)
        {
            node.getProgramPunchPower().apply(this);
        }
        outAPunchPowerProgramCharacteristic(node);
    }

    public void inAKickReachProgramCharacteristic(AKickReachProgramCharacteristic node)
    {
        defaultIn(node);
    }

    public void outAKickReachProgramCharacteristic(AKickReachProgramCharacteristic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKickReachProgramCharacteristic(AKickReachProgramCharacteristic node)
    {
        inAKickReachProgramCharacteristic(node);
        if(node.getProgramKickReach() != null)
        {
            node.getProgramKickReach().apply(this);
        }
        outAKickReachProgramCharacteristic(node);
    }

    public void inAKickPowerProgramCharacteristic(AKickPowerProgramCharacteristic node)
    {
        defaultIn(node);
    }

    public void outAKickPowerProgramCharacteristic(AKickPowerProgramCharacteristic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKickPowerProgramCharacteristic(AKickPowerProgramCharacteristic node)
    {
        inAKickPowerProgramCharacteristic(node);
        if(node.getProgramKickPower() != null)
        {
            node.getProgramKickPower().apply(this);
        }
        outAKickPowerProgramCharacteristic(node);
    }

    public void inAProgramPunchReach(AProgramPunchReach node)
    {
        defaultIn(node);
    }

    public void outAProgramPunchReach(AProgramPunchReach node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramPunchReach(AProgramPunchReach node)
    {
        inAProgramPunchReach(node);
        if(node.getPunchReach() != null)
        {
            node.getPunchReach().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramPunchReach(node);
    }

    public void inAProgramPunchPower(AProgramPunchPower node)
    {
        defaultIn(node);
    }

    public void outAProgramPunchPower(AProgramPunchPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramPunchPower(AProgramPunchPower node)
    {
        inAProgramPunchPower(node);
        if(node.getPunchPower() != null)
        {
            node.getPunchPower().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramPunchPower(node);
    }

    public void inAProgramKickReach(AProgramKickReach node)
    {
        defaultIn(node);
    }

    public void outAProgramKickReach(AProgramKickReach node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramKickReach(AProgramKickReach node)
    {
        inAProgramKickReach(node);
        if(node.getKickReach() != null)
        {
            node.getKickReach().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramKickReach(node);
    }

    public void inAProgramKickPower(AProgramKickPower node)
    {
        defaultIn(node);
    }

    public void outAProgramKickPower(AProgramKickPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramKickPower(AProgramKickPower node)
    {
        inAProgramKickPower(node);
        if(node.getKickPower() != null)
        {
            node.getKickPower().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramKickPower(node);
    }

    public void inAProgramBehaviour(AProgramBehaviour node)
    {
        defaultIn(node);
    }

    public void outAProgramBehaviour(AProgramBehaviour node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramBehaviour(AProgramBehaviour node)
    {
        inAProgramBehaviour(node);
        {
            List<PProgramRule> copy = new ArrayList<PProgramRule>(node.getProgramRule());
            for(PProgramRule e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramBehaviour(node);
    }

    public void inAProgramRule(AProgramRule node)
    {
        defaultIn(node);
    }

    public void outAProgramRule(AProgramRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramRule(AProgramRule node)
    {
        inAProgramRule(node);
        if(node.getConditionType() != null)
        {
            node.getConditionType().apply(this);
        }
        if(node.getBracketl() != null)
        {
            node.getBracketl().apply(this);
        }
        if(node.getProgramMoveAction() != null)
        {
            node.getProgramMoveAction().apply(this);
        }
        if(node.getProgramFightAction() != null)
        {
            node.getProgramFightAction().apply(this);
        }
        if(node.getBracketr() != null)
        {
            node.getBracketr().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        outAProgramRule(node);
    }

    public void inASingleMoveActionProgramMoveAction(ASingleMoveActionProgramMoveAction node)
    {
        defaultIn(node);
    }

    public void outASingleMoveActionProgramMoveAction(ASingleMoveActionProgramMoveAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleMoveActionProgramMoveAction(ASingleMoveActionProgramMoveAction node)
    {
        inASingleMoveActionProgramMoveAction(node);
        if(node.getMoveActionType() != null)
        {
            node.getMoveActionType().apply(this);
        }
        outASingleMoveActionProgramMoveAction(node);
    }

    public void inAChooseMoveActionProgramMoveAction(AChooseMoveActionProgramMoveAction node)
    {
        defaultIn(node);
    }

    public void outAChooseMoveActionProgramMoveAction(AChooseMoveActionProgramMoveAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChooseMoveActionProgramMoveAction(AChooseMoveActionProgramMoveAction node)
    {
        inAChooseMoveActionProgramMoveAction(node);
        if(node.getChoose() != null)
        {
            node.getChoose().apply(this);
        }
        if(node.getBracketl() != null)
        {
            node.getBracketl().apply(this);
        }
        {
            List<PMoveActionType> copy = new ArrayList<PMoveActionType>(node.getMoveActionType());
            for(PMoveActionType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBracketr() != null)
        {
            node.getBracketr().apply(this);
        }
        outAChooseMoveActionProgramMoveAction(node);
    }

    public void inASingleFightActionProgramFightAction(ASingleFightActionProgramFightAction node)
    {
        defaultIn(node);
    }

    public void outASingleFightActionProgramFightAction(ASingleFightActionProgramFightAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFightActionProgramFightAction(ASingleFightActionProgramFightAction node)
    {
        inASingleFightActionProgramFightAction(node);
        if(node.getFightActionType() != null)
        {
            node.getFightActionType().apply(this);
        }
        outASingleFightActionProgramFightAction(node);
    }

    public void inAChooseFightActionProgramFightAction(AChooseFightActionProgramFightAction node)
    {
        defaultIn(node);
    }

    public void outAChooseFightActionProgramFightAction(AChooseFightActionProgramFightAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChooseFightActionProgramFightAction(AChooseFightActionProgramFightAction node)
    {
        inAChooseFightActionProgramFightAction(node);
        if(node.getChoose() != null)
        {
            node.getChoose().apply(this);
        }
        if(node.getBracketl() != null)
        {
            node.getBracketl().apply(this);
        }
        {
            List<PFightActionType> copy = new ArrayList<PFightActionType>(node.getFightActionType());
            for(PFightActionType e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBracketr() != null)
        {
            node.getBracketr().apply(this);
        }
        outAChooseFightActionProgramFightAction(node);
    }

    public void inAWalkTowardsMoveActionType(AWalkTowardsMoveActionType node)
    {
        defaultIn(node);
    }

    public void outAWalkTowardsMoveActionType(AWalkTowardsMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWalkTowardsMoveActionType(AWalkTowardsMoveActionType node)
    {
        inAWalkTowardsMoveActionType(node);
        if(node.getWalkTowards() != null)
        {
            node.getWalkTowards().apply(this);
        }
        outAWalkTowardsMoveActionType(node);
    }

    public void inAWalkAwayMoveActionType(AWalkAwayMoveActionType node)
    {
        defaultIn(node);
    }

    public void outAWalkAwayMoveActionType(AWalkAwayMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWalkAwayMoveActionType(AWalkAwayMoveActionType node)
    {
        inAWalkAwayMoveActionType(node);
        if(node.getWalkAway() != null)
        {
            node.getWalkAway().apply(this);
        }
        outAWalkAwayMoveActionType(node);
    }

    public void inARunTowardsMoveActionType(ARunTowardsMoveActionType node)
    {
        defaultIn(node);
    }

    public void outARunTowardsMoveActionType(ARunTowardsMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARunTowardsMoveActionType(ARunTowardsMoveActionType node)
    {
        inARunTowardsMoveActionType(node);
        if(node.getRunTowards() != null)
        {
            node.getRunTowards().apply(this);
        }
        outARunTowardsMoveActionType(node);
    }

    public void inARunAwayMoveActionType(ARunAwayMoveActionType node)
    {
        defaultIn(node);
    }

    public void outARunAwayMoveActionType(ARunAwayMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARunAwayMoveActionType(ARunAwayMoveActionType node)
    {
        inARunAwayMoveActionType(node);
        if(node.getRunAway() != null)
        {
            node.getRunAway().apply(this);
        }
        outARunAwayMoveActionType(node);
    }

    public void inAJumpMoveActionType(AJumpMoveActionType node)
    {
        defaultIn(node);
    }

    public void outAJumpMoveActionType(AJumpMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJumpMoveActionType(AJumpMoveActionType node)
    {
        inAJumpMoveActionType(node);
        if(node.getJump() != null)
        {
            node.getJump().apply(this);
        }
        outAJumpMoveActionType(node);
    }

    public void inACrouchMoveActionType(ACrouchMoveActionType node)
    {
        defaultIn(node);
    }

    public void outACrouchMoveActionType(ACrouchMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACrouchMoveActionType(ACrouchMoveActionType node)
    {
        inACrouchMoveActionType(node);
        if(node.getCrouch() != null)
        {
            node.getCrouch().apply(this);
        }
        outACrouchMoveActionType(node);
    }

    public void inAStandMoveActionType(AStandMoveActionType node)
    {
        defaultIn(node);
    }

    public void outAStandMoveActionType(AStandMoveActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStandMoveActionType(AStandMoveActionType node)
    {
        inAStandMoveActionType(node);
        if(node.getStand() != null)
        {
            node.getStand().apply(this);
        }
        outAStandMoveActionType(node);
    }

    public void inABlockLowFightActionType(ABlockLowFightActionType node)
    {
        defaultIn(node);
    }

    public void outABlockLowFightActionType(ABlockLowFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockLowFightActionType(ABlockLowFightActionType node)
    {
        inABlockLowFightActionType(node);
        if(node.getBlockLow() != null)
        {
            node.getBlockLow().apply(this);
        }
        outABlockLowFightActionType(node);
    }

    public void inABlockHighFightActionType(ABlockHighFightActionType node)
    {
        defaultIn(node);
    }

    public void outABlockHighFightActionType(ABlockHighFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockHighFightActionType(ABlockHighFightActionType node)
    {
        inABlockHighFightActionType(node);
        if(node.getBlockHigh() != null)
        {
            node.getBlockHigh().apply(this);
        }
        outABlockHighFightActionType(node);
    }

    public void inAPunchLowFightActionType(APunchLowFightActionType node)
    {
        defaultIn(node);
    }

    public void outAPunchLowFightActionType(APunchLowFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunchLowFightActionType(APunchLowFightActionType node)
    {
        inAPunchLowFightActionType(node);
        if(node.getPunchLow() != null)
        {
            node.getPunchLow().apply(this);
        }
        outAPunchLowFightActionType(node);
    }

    public void inAPunchHighFightActionType(APunchHighFightActionType node)
    {
        defaultIn(node);
    }

    public void outAPunchHighFightActionType(APunchHighFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunchHighFightActionType(APunchHighFightActionType node)
    {
        inAPunchHighFightActionType(node);
        if(node.getPunchHigh() != null)
        {
            node.getPunchHigh().apply(this);
        }
        outAPunchHighFightActionType(node);
    }

    public void inAKickLowFightActionType(AKickLowFightActionType node)
    {
        defaultIn(node);
    }

    public void outAKickLowFightActionType(AKickLowFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKickLowFightActionType(AKickLowFightActionType node)
    {
        inAKickLowFightActionType(node);
        if(node.getKickLow() != null)
        {
            node.getKickLow().apply(this);
        }
        outAKickLowFightActionType(node);
    }

    public void inAKickHighFightActionType(AKickHighFightActionType node)
    {
        defaultIn(node);
    }

    public void outAKickHighFightActionType(AKickHighFightActionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKickHighFightActionType(AKickHighFightActionType node)
    {
        inAKickHighFightActionType(node);
        if(node.getKickHigh() != null)
        {
            node.getKickHigh().apply(this);
        }
        outAKickHighFightActionType(node);
    }

    public void inAAlwaysConditionType(AAlwaysConditionType node)
    {
        defaultIn(node);
    }

    public void outAAlwaysConditionType(AAlwaysConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlwaysConditionType(AAlwaysConditionType node)
    {
        inAAlwaysConditionType(node);
        if(node.getAlways() != null)
        {
            node.getAlways().apply(this);
        }
        outAAlwaysConditionType(node);
    }

    public void inANearConditionType(ANearConditionType node)
    {
        defaultIn(node);
    }

    public void outANearConditionType(ANearConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANearConditionType(ANearConditionType node)
    {
        inANearConditionType(node);
        if(node.getNear() != null)
        {
            node.getNear().apply(this);
        }
        outANearConditionType(node);
    }

    public void inAFarConditionType(AFarConditionType node)
    {
        defaultIn(node);
    }

    public void outAFarConditionType(AFarConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFarConditionType(AFarConditionType node)
    {
        inAFarConditionType(node);
        if(node.getFar() != null)
        {
            node.getFar().apply(this);
        }
        outAFarConditionType(node);
    }

    public void inAMuchStrongerConditionType(AMuchStrongerConditionType node)
    {
        defaultIn(node);
    }

    public void outAMuchStrongerConditionType(AMuchStrongerConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMuchStrongerConditionType(AMuchStrongerConditionType node)
    {
        inAMuchStrongerConditionType(node);
        if(node.getMuchStronger() != null)
        {
            node.getMuchStronger().apply(this);
        }
        outAMuchStrongerConditionType(node);
    }

    public void inAStrongerConditionType(AStrongerConditionType node)
    {
        defaultIn(node);
    }

    public void outAStrongerConditionType(AStrongerConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrongerConditionType(AStrongerConditionType node)
    {
        inAStrongerConditionType(node);
        if(node.getStronger() != null)
        {
            node.getStronger().apply(this);
        }
        outAStrongerConditionType(node);
    }

    public void inAEvenConditionType(AEvenConditionType node)
    {
        defaultIn(node);
    }

    public void outAEvenConditionType(AEvenConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEvenConditionType(AEvenConditionType node)
    {
        inAEvenConditionType(node);
        if(node.getEven() != null)
        {
            node.getEven().apply(this);
        }
        outAEvenConditionType(node);
    }

    public void inAWeakerConditionType(AWeakerConditionType node)
    {
        defaultIn(node);
    }

    public void outAWeakerConditionType(AWeakerConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWeakerConditionType(AWeakerConditionType node)
    {
        inAWeakerConditionType(node);
        if(node.getWeaker() != null)
        {
            node.getWeaker().apply(this);
        }
        outAWeakerConditionType(node);
    }

    public void inAMuchWeakerConditionType(AMuchWeakerConditionType node)
    {
        defaultIn(node);
    }

    public void outAMuchWeakerConditionType(AMuchWeakerConditionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMuchWeakerConditionType(AMuchWeakerConditionType node)
    {
        inAMuchWeakerConditionType(node);
        if(node.getMuchWeaker() != null)
        {
            node.getMuchWeaker().apply(this);
        }
        outAMuchWeakerConditionType(node);
    }
}
