/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class AChooseMoveActionProgramMoveAction extends PProgramMoveAction
{
    private TChoose _choose_;
    private TBracketl _bracketl_;
    private final LinkedList<PMoveActionType> _moveActionType_ = new LinkedList<PMoveActionType>();
    private TBracketr _bracketr_;

    public AChooseMoveActionProgramMoveAction()
    {
        // Constructor
    }

    public AChooseMoveActionProgramMoveAction(
        @SuppressWarnings("hiding") TChoose _choose_,
        @SuppressWarnings("hiding") TBracketl _bracketl_,
        @SuppressWarnings("hiding") List<PMoveActionType> _moveActionType_,
        @SuppressWarnings("hiding") TBracketr _bracketr_)
    {
        // Constructor
        setChoose(_choose_);

        setBracketl(_bracketl_);

        setMoveActionType(_moveActionType_);

        setBracketr(_bracketr_);

    }

    @Override
    public Object clone()
    {
        return new AChooseMoveActionProgramMoveAction(
            cloneNode(this._choose_),
            cloneNode(this._bracketl_),
            cloneList(this._moveActionType_),
            cloneNode(this._bracketr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChooseMoveActionProgramMoveAction(this);
    }

    public TChoose getChoose()
    {
        return this._choose_;
    }

    public void setChoose(TChoose node)
    {
        if(this._choose_ != null)
        {
            this._choose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._choose_ = node;
    }

    public TBracketl getBracketl()
    {
        return this._bracketl_;
    }

    public void setBracketl(TBracketl node)
    {
        if(this._bracketl_ != null)
        {
            this._bracketl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bracketl_ = node;
    }

    public LinkedList<PMoveActionType> getMoveActionType()
    {
        return this._moveActionType_;
    }

    public void setMoveActionType(List<PMoveActionType> list)
    {
        this._moveActionType_.clear();
        this._moveActionType_.addAll(list);
        for(PMoveActionType e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TBracketr getBracketr()
    {
        return this._bracketr_;
    }

    public void setBracketr(TBracketr node)
    {
        if(this._bracketr_ != null)
        {
            this._bracketr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bracketr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._choose_)
            + toString(this._bracketl_)
            + toString(this._moveActionType_)
            + toString(this._bracketr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._choose_ == child)
        {
            this._choose_ = null;
            return;
        }

        if(this._bracketl_ == child)
        {
            this._bracketl_ = null;
            return;
        }

        if(this._moveActionType_.remove(child))
        {
            return;
        }

        if(this._bracketr_ == child)
        {
            this._bracketr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._choose_ == oldChild)
        {
            setChoose((TChoose) newChild);
            return;
        }

        if(this._bracketl_ == oldChild)
        {
            setBracketl((TBracketl) newChild);
            return;
        }

        for(ListIterator<PMoveActionType> i = this._moveActionType_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMoveActionType) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._bracketr_ == oldChild)
        {
            setBracketr((TBracketr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
