/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class AChooseFightActionProgramFightAction extends PProgramFightAction
{
    private TChoose _choose_;
    private TParenthesisl _parenthesisl_;
    private final LinkedList<PFightActionType> _fightActionType_ = new LinkedList<PFightActionType>();
    private TParenthesisr _parenthesisr_;

    public AChooseFightActionProgramFightAction()
    {
        // Constructor
    }

    public AChooseFightActionProgramFightAction(
        @SuppressWarnings("hiding") TChoose _choose_,
        @SuppressWarnings("hiding") TParenthesisl _parenthesisl_,
        @SuppressWarnings("hiding") List<PFightActionType> _fightActionType_,
        @SuppressWarnings("hiding") TParenthesisr _parenthesisr_)
    {
        // Constructor
        setChoose(_choose_);

        setParenthesisl(_parenthesisl_);

        setFightActionType(_fightActionType_);

        setParenthesisr(_parenthesisr_);

    }

    @Override
    public Object clone()
    {
        return new AChooseFightActionProgramFightAction(
            cloneNode(this._choose_),
            cloneNode(this._parenthesisl_),
            cloneList(this._fightActionType_),
            cloneNode(this._parenthesisr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChooseFightActionProgramFightAction(this);
    }

    public TChoose getChoose()
    {
        return this._choose_;
    }

    public void setChoose(TChoose node)
    {
        if(this._choose_ != null)
        {
            this._choose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._choose_ = node;
    }

    public TParenthesisl getParenthesisl()
    {
        return this._parenthesisl_;
    }

    public void setParenthesisl(TParenthesisl node)
    {
        if(this._parenthesisl_ != null)
        {
            this._parenthesisl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenthesisl_ = node;
    }

    public LinkedList<PFightActionType> getFightActionType()
    {
        return this._fightActionType_;
    }

    public void setFightActionType(List<PFightActionType> list)
    {
        this._fightActionType_.clear();
        this._fightActionType_.addAll(list);
        for(PFightActionType e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TParenthesisr getParenthesisr()
    {
        return this._parenthesisr_;
    }

    public void setParenthesisr(TParenthesisr node)
    {
        if(this._parenthesisr_ != null)
        {
            this._parenthesisr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenthesisr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._choose_)
            + toString(this._parenthesisl_)
            + toString(this._fightActionType_)
            + toString(this._parenthesisr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._choose_ == child)
        {
            this._choose_ = null;
            return;
        }

        if(this._parenthesisl_ == child)
        {
            this._parenthesisl_ = null;
            return;
        }

        if(this._fightActionType_.remove(child))
        {
            return;
        }

        if(this._parenthesisr_ == child)
        {
            this._parenthesisr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._choose_ == oldChild)
        {
            setChoose((TChoose) newChild);
            return;
        }

        if(this._parenthesisl_ == oldChild)
        {
            setParenthesisl((TParenthesisl) newChild);
            return;
        }

        for(ListIterator<PFightActionType> i = this._fightActionType_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFightActionType) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._parenthesisr_ == oldChild)
        {
            setParenthesisr((TParenthesisr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
