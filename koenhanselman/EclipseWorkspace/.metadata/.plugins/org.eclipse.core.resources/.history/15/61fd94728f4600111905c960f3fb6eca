/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class ASingleActionProgramAction extends PProgramAction
{
    private final LinkedList<TLetter> _action_ = new LinkedList<TLetter>();

    public ASingleActionProgramAction()
    {
        // Constructor
    }

    public ASingleActionProgramAction(
        @SuppressWarnings("hiding") List<TLetter> _action_)
    {
        // Constructor
        setAction(_action_);

    }

    @Override
    public Object clone()
    {
        return new ASingleActionProgramAction(
            cloneList(this._action_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleActionProgramAction(this);
    }

    public LinkedList<TLetter> getAction()
    {
        return this._action_;
    }

    public void setAction(List<TLetter> list)
    {
        this._action_.clear();
        this._action_.addAll(list);
        for(TLetter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._action_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._action_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TLetter> i = this._action_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TLetter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
