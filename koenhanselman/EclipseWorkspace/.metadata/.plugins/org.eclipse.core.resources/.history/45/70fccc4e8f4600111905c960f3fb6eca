/* This file was generated by SableCC (http://www.sablecc.org/). */

package saf.node;

import java.util.*;
import saf.analysis.*;

@SuppressWarnings("nls")
public final class AChooseProgramAction extends PProgramAction
{
    private final LinkedList<TLetter> _choose_ = new LinkedList<TLetter>();
    private TLeftParen _leftParen_;
    private final LinkedList<TLetter> _actions_ = new LinkedList<TLetter>();
    private TRightParen _rightParen_;

    public AChooseProgramAction()
    {
        // Constructor
    }

    public AChooseProgramAction(
        @SuppressWarnings("hiding") List<TLetter> _choose_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") List<TLetter> _actions_,
        @SuppressWarnings("hiding") TRightParen _rightParen_)
    {
        // Constructor
        setChoose(_choose_);

        setLeftParen(_leftParen_);

        setActions(_actions_);

        setRightParen(_rightParen_);

    }

    @Override
    public Object clone()
    {
        return new AChooseProgramAction(
            cloneList(this._choose_),
            cloneNode(this._leftParen_),
            cloneList(this._actions_),
            cloneNode(this._rightParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChooseProgramAction(this);
    }

    public LinkedList<TLetter> getChoose()
    {
        return this._choose_;
    }

    public void setChoose(List<TLetter> list)
    {
        this._choose_.clear();
        this._choose_.addAll(list);
        for(TLetter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public LinkedList<TLetter> getActions()
    {
        return this._actions_;
    }

    public void setActions(List<TLetter> list)
    {
        this._actions_.clear();
        this._actions_.addAll(list);
        for(TLetter e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._choose_)
            + toString(this._leftParen_)
            + toString(this._actions_)
            + toString(this._rightParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._choose_.remove(child))
        {
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._actions_.remove(child))
        {
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TLetter> i = this._choose_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TLetter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        for(ListIterator<TLetter> i = this._actions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TLetter) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
