 /**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(Saf)package parser;import java.util.ArrayList;import abstractSyntaxTree.*;public class Saf{}PARSER_END(Saf)SKIP :{  " "| "\t"| "\n"| "\r"| "\r\n"}TOKEN :{  < ASSIGNMENT : "=" >| < AND : "and" >| < OR : "or" >| < CHOOSE : "choose" >| < IDENTIFIER : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >| < NUM : ([ "0"-"9" ])+ >| < LEFTPARENTHESIS : "(" >| < RIGHTPARENTHESIS : ")" >| < LEFTCURLYBRACKET : "{" >| < RIGHTCURLYBRACKET : "}" >| < LEFTSQAREBRACKET : "[" >| < RIGHTSQAREBRACKET : "]" >}ArrayList < Fighter > Parse() :{  ArrayList < Fighter > fighters = new ArrayList < Fighter > ();}{  (
    {   Fighter tempFighter = new Fighter();
  Token tempFighterName = new Token();
  Personality tempFighterPersonality = new Personality();
  PersonalityNode tempPersonalityNode = new PersonalityNode();
  Behavior tempFighterBehavior = new Behavior();
  BehaviorRule tempBehaviorRule = new BehaviorRule(); }    (      tempFighterName = < IDENTIFIER >      {        tempFighter.setName(tempFighterName.toString());      }    )    (< LEFTCURLYBRACKET >)    (      LOOKAHEAD(2)      (        tempPersonalityNode = Personality()        {          tempFighterPersonality.addNode(tempPersonalityNode);        }      )    |      (        tempBehaviorRule = Behavior()        {          tempFighterBehavior.addRule(tempBehaviorRule);        }      )    )*    (< RIGHTCURLYBRACKET >)    {      tempFighter.addPersonality(tempFighterPersonality);    }    {      tempFighter.addBehavior(tempFighterBehavior);    }    {      fighters.add(tempFighter);    }  )*  < EOF >  {    return fighters;  }}PersonalityNode Personality() :{  Token strength = new Token();  Token value = new Token();  PersonalityNode temp = new PersonalityNode();}{  (    strength = < IDENTIFIER >    {      temp.setStrength(strength.toString());    }  )  < ASSIGNMENT >  (    value = < NUM >    {      temp.setValue(Integer.parseInt(value.toString()));    }  )  {    return temp;  }}BehaviorRule Behavior() :{  Condition conditions = new Condition();  Move moves = new Move();  Attack attacks = new Attack();  BehaviorRule rule = new BehaviorRule();}{  (    conditions = Condition()    {      rule.setCondition(conditions);    }  )  < LEFTSQAREBRACKET >  (    moves = Moves()    {      rule.setMove(moves);    }  )  (    attacks = Attacks()    {      rule.setAttack(attacks);    }  )  < RIGHTSQAREBRACKET >  {    return rule;  }}Condition Condition() :{  ArrayList < String > tempCondition = new ArrayList < String > ();  Token CondToken = new Token();  Condition condition = new Condition();}{  (    CondToken = < IDENTIFIER >    {      tempCondition.add(CondToken.toString());    }  )  (        (      LOOKAHEAD(2)      (        CondToken = < OR >        {          tempCondition.add(CondToken.toString());        }      )    |      (        CondToken = < AND >        {          tempCondition.add(CondToken.toString());        }      )    )    (      CondToken = < IDENTIFIER >      {        tempCondition.add(CondToken.toString());      }    )
  )*  {    condition.setConditions(tempCondition);  }  {    return condition;  }}Move Moves() :{  ArrayList < String > moveTemp = new ArrayList < String > ();  Token moveToken = new Token();  Move moves = new Move();}{  (    LOOKAHEAD(2)    (      moveToken = < IDENTIFIER >      {        moveTemp.add(moveToken.toString());      }    )  |    (      (< CHOOSE >)       (< LEFTPARENTHESIS >)      (        moveToken = < IDENTIFIER >        {          moveTemp.add(moveToken.toString());        }      )+      (< RIGHTPARENTHESIS >)    )  )  {    moves.setMoves(moveTemp);  }  {    return moves;  }}Attack Attacks() :{  ArrayList < String > attackTemp = new ArrayList < String > ();  Token attackToken = new Token();  Attack attacks = new Attack();}{  (    LOOKAHEAD(2)    (      attackToken = < IDENTIFIER >      {        attackTemp.add(attackToken.toString());      }    )  |    (      (< CHOOSE >)       (< LEFTPARENTHESIS >)      (        attackToken = < IDENTIFIER >        {          attackTemp.add(attackToken.toString());        }      )+      (< RIGHTPARENTHESIS >)    )  )  {    attacks.setAttacks(attackTemp);  }  {    return attacks;  }}