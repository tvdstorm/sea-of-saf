/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SAFchecker.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg2)package SAFchecker;

public class eg2/*@bgen(jjtree)*/implements eg2TreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTeg2State jjtree = new JJTeg2State();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");
    System.out.println("Enter a SAF character description :");  
    new eg2(System.in);
    try
    {
      SimpleNode n = eg2.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(eg2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN :
{
  < MOVE_ACTION :
 	 < MOVE_ACTION_TYPE >
  >
}

TOKEN : /* LITERALS */
{
  < MOVE_ACTION_TYPE :
  	 < WALK_TO > |
  	 < WALK_AW > |
  	 < RUN_TO >  |
  	 < RUN_AW >  |
  	 < JUMP >    |
  	 < CROUCH >  |
  	 < STAND >  
	 
  >
| < #WALK_TO: "walk_towards" >
| < #WALK_AW: "walk_away" >
| < #RUN_TO:  "run_towards" >
| < #RUN_AW:  "run_away" >
| < #JUMP:    "jump" >
| < #CROUCH:  "crouch" >
| < #STAND:   "stand" >

}

TOKEN :
{
  < FIGHT_ACTION :
 	 < FIGHT_ACTION_TYPE >
  >
}

TOKEN : /* LITERALS */
{
  < FIGHT_ACTION_TYPE :
  	 < BLOCK_LOW >  |
  	 < BLOCK_HIGH > |
  	 < PUNCH_LOW >  |
  	 < PUNCH_HIGH > |
  	 < KICK_LOW >   |
  	 < KICK_HIGH >  
  	 
  >
| < #BLOCK_LOW:  "block_low" >
| < #BLOCK_HIGH: "block_high" >
| < #PUNCH_LOW:  "punch_low" >
| < #PUNCH_HIGH: "punch_high" >
| < #KICK_LOW:   "kick_low" >
| < #KICK_HIGH:  "kick_high" >

}

TOKEN :
{
  < CONDITIONS :
 	 < CONDITION_TYPE >
  >
}

TOKEN :
{
  < CONDITION_TYPE:
     < ALWAYS >   |
 	 < NEAR >     |
  	 < FAR >      |
  	 < MUCH_STR > |
  	 < STRONGER >  |
  	 < EVEN >     |
  	 < WEAKER >   |
  	 < MUCH_WEA >

 >
| < #ALWAYS: "always" >
| < #NEAR: "near" >
| < #FAR: "far" >
| < #MUCH_STR: "much_stronger" >
| < #STRONGER: "stronger" >
| < #EVEN: "even" >
| < #WEAKER: "weaker" >
| < #MUCH_WEA: "much_weaker" >
}

TOKEN : 
{
  < NUMBER :
    < NUM >
  >
| < #NUM : [ "0"-"9" ] >
}

TOKEN :
{
	< CHARACTERISTICS:
		< PUNCH_REACH >   |
		< PUNCH_POWER >   |
		< KICK_REACH >    |
		< KICK_POWER >
	>

| <  #PUNCH_REACH: "punchReach" >
| <  #PUNCH_POWER: "punchPower" >
| <  #KICK_REACH: "kickReach" >
| <  #KICK_POWER: "kickPower" >
	
}

TOKEN :
{
	< CHOOSE:
	< CH_WRD>
	>
| <  #CH_WRD: "choose" >
}

TOKEN :
{
	< AND:
	< AND_WRD> 
	>
| <  #AND_WRD: "and" >

}

TOKEN :
{
	< OR:
	< OR_WRD> 
	>
| <  #OR_WRD: "or" >

}

TOKEN :
{
	<LEFT_PARENTHESIS :
	< LEFT_PAR >
	>
| <  #LEFT_PAR: ["("] >
}
TOKEN :
{
	<RIGHT_PARENTHESIS :
	< RIGHT_PAR >
	>
| <  #RIGHT_PAR: [")"] >
}

TOKEN :
{
	<LEFT_SQBRACKET :
	< LEFT_SQBR >
	>
| <  #LEFT_SQBR: ["["] >
}
TOKEN :
{
	<RIGHT_SQBRACKET :
	< RIGHT_SQBR >
	>
| <  #RIGHT_SQBR: ["]"] >
}

TOKEN :
{
	<LEFT_CURLBRACKET :
	< LEFT_CURLBR >
	>
| <  #LEFT_CURLBR: ["{"] >
}
TOKEN :
{
	<RIGHT_CURLBRACKET :
	< RIGHT_CURLBR >
	>
| <  #RIGHT_CURLBR: ["}"] >
}	

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Identifier() LeftCURLBR() (Personality())* (Behaviour())* RightCURLBR()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Behaviour() :
{/*@bgen(jjtree) Behaviour */
  SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIOUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Behaviour */
          try {
/*@egen*/
	  conditionsWithAndOr() LeftSQBR() (MoveAction()|ChooseMoveAction()) (FightAction() | ChooseFightAction()) RightSQBR()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Personality() :
{/*@bgen(jjtree) Personality */
  SimpleNode jjtn000 = new SimpleNode(JJTPERSONALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Personality */
          try {
/*@egen*/
	  Characteristics() "=" Number0_9()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void ChooseMoveAction() :
{/*@bgen(jjtree) ChooseMoveAction */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOOSEMOVEACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChooseMoveAction */
         try {
/*@egen*/
	 Choose() LeftParenthesis() MoveAction() MoveAction() RightParenthesis()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void ChooseFightAction() :
{/*@bgen(jjtree) ChooseFightAction */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOOSEFIGHTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ChooseFightAction */
         try {
/*@egen*/
	 Choose() LeftParenthesis() FightAction() FightAction() RightParenthesis()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MoveAction() :
{/*@bgen(jjtree) MoveAction */
  SimpleNode jjtn000 = new SimpleNode(JJTMOVEACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveAction */
  try {
/*@egen*/
  < MOVE_ACTION >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FightAction() :
{/*@bgen(jjtree) FightAction */
  SimpleNode jjtn000 = new SimpleNode(JJTFIGHTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FightAction */
  try {
/*@egen*/
  < FIGHT_ACTION >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Choose() :
{/*@bgen(jjtree) Choose */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Choose */
  try {
/*@egen*/
  < CHOOSE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void And() :
{/*@bgen(jjtree) And */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) And */
  try {
/*@egen*/
  < AND >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Or() :
{/*@bgen(jjtree) Or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Or */
  try {
/*@egen*/
  < OR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Conditions():
{/*@bgen(jjtree) Conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conditions */
  try {
/*@egen*/
  < CONDITIONS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void conditiondAndOr():
{/*@bgen(jjtree) conditiondAndOr */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONDANDOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) conditiondAndOr */
        try {
/*@egen*/
	( ( Or() | And() ) Conditions() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void conditionsWithAndOr():
{/*@bgen(jjtree) conditionsWithAndOr */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSWITHANDOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) conditionsWithAndOr */
        try {
/*@egen*/
	Conditions() conditiondAndOr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number0_9():
{/*@bgen(jjtree) Number0_9 */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER0_9);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Number0_9 */
  try {
/*@egen*/
  < NUMBER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void LeftParenthesis():
{/*@bgen(jjtree) LeftParenthesis */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftParenthesis */
  try {
/*@egen*/
  < LEFT_PARENTHESIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RightParenthesis():
{/*@bgen(jjtree) RightParenthesis */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightParenthesis */
  try {
/*@egen*/
  < RIGHT_PARENTHESIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LeftSQBR():
{/*@bgen(jjtree) LeftSQBR */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFTSQBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftSQBR */
  try {
/*@egen*/
  < LEFT_SQBRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RightSQBR():
{/*@bgen(jjtree) RightSQBR */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHTSQBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightSQBR */
  try {
/*@egen*/
  < RIGHT_SQBRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LeftCURLBR():
{/*@bgen(jjtree) LeftCURLBR */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFTCURLBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftCURLBR */
  try {
/*@egen*/
  < LEFT_CURLBRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RightCURLBR():
{/*@bgen(jjtree) RightCURLBR */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHTCURLBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightCURLBR */
  try {
/*@egen*/
  < RIGHT_CURLBRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Characteristics():
{/*@bgen(jjtree) Characteristics */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARACTERISTICS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Characteristics */
  try {
/*@egen*/
  < CHARACTERISTICS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}