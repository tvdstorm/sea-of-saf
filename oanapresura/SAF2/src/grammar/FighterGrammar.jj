/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FighterGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(FighterGrammar)
package grammar;
import ast.*;
import interpreter.*;


import java.io.FileInputStream;
import java.io.InputStream;

public class FighterGrammar/*@bgen(jjtree)*/implements FighterGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTFighterGrammarState jjtree = new JJTFighterGrammarState();

/*@egen*/  public static void main(String args [])  {    try{
		String file = "input.txt";
		InputStream input = new FileInputStream("input.txt");
		System.out.println("[Parser]Parsing from file ... ");	
		FighterGrammar parser = new FighterGrammar(input);
		SAF saf = parser.Parse();					
		Interpreter i = new Interpreter(saf.firstBot, saf.secondBot);
		boolean result = i.interpret();
		
		if (result == true)
			System.out.println("[Interpreter]Healthy fighters!");
			
		System.out.println("[Parser]Done!");
    }
	catch(Exception e)
	{
		System.out.println("[Parser]Oops! ");
		System.out.println(e.getMessage());
		e.printStackTrace();
	}  }}PARSER_END(FighterGrammar)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}


TOKEN : /* Operators */
{
	<AND: "AND" | "and"> |
	<OR: "OR" | "or"> |
	<ASSIGN: "="> |
	<CHOOSE: "choose">
}

TOKEN : /* Types of paranthesis used */
{
	<LSQBRACKET: "["> | 
	<RSQBRACKET: "]"> |
	<LBRACE: "{"> | 
	<RBRACE: "}"> |			
	<LBRACKET: "("> |
	<RBRACKET: ")">
}


TOKEN :
{
	<IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > |
	<VALUE:  ["1"-"9"]  ( ["0"-"9"] )* > 
}

/** Root production. */

SAF Parse() :
{/*@bgen(jjtree) Parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
 	 	
	Bot bot1;
	Bot bot2;	
}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/  	
	bot1 = getBot()
	bot2 = getBot()		<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{	  		SAF saf = new SAF();
		saf.setBot1(bot1);
		saf.setBot2(bot2);
		return saf;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 	
}	
Bot getBot():
{/*@bgen(jjtree) getBot */
        SimpleNode jjtn000 = new SimpleNode(JJTGETBOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token name = new Token();
	Personality p = new Personality();
	Behaviour b = new Behaviour();
	Strength s = new Strength();
	BehaviourItem i = new BehaviourItem();
	Bot bot = new Bot();
}
{/*@bgen(jjtree) getBot */
                try {
/*@egen*/
			name = < IDENTIFIER >
		{
		  bot.setName(name.toString());	  		}
		
		<LBRACE>
		
		(
		  LOOKAHEAD(2)
		  
		  ( s = Strength() )
		  {
		    p.addStrength(s);		  }
		| 
		  ( i = BehaviourItem() )
		  {
		    b.addCondition(i);		  }
		    
		)*	
		
		<RBRACE>
	
		{
		  bot.setBehaviour(b);
		  bot.setPersonality(p);		}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{	  return bot;
	}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
} 


Strength Strength() :
{/*@bgen(jjtree) Strength */
        SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token strength = new Token();
	Token value = new Token();
	
}
{/*@bgen(jjtree) Strength */
         try {
/*@egen*/
	 (strength = <IDENTIFIER>) <ASSIGN> (value = <VALUE>)/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	 	/*System.out.println(strength + " " + value);*/	 	
		return new Strength(strength.toString(), Integer.valueOf(value.toString()));   	 }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

BehaviourItem BehaviourItem() :
{/*@bgen(jjtree) BehaviourItem */
        SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIOURITEM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Condition condition = new Condition();	
	Move move = new Move();
	Attack attack = new Attack();	
}
{/*@bgen(jjtree) BehaviourItem */
         try {
/*@egen*/	 
	 ( 
	 	 Condition(condition)
		 <LSQBRACKET>
		  (
		  	  Move(move)						  
			  Attack(attack)			  
		  )  
		 <RSQBRACKET>
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {			 
	 	/*move.printMove();
	 	attack.printAttack();*/
		return new BehaviourItem(condition, move, attack); 
	 }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Condition(Condition c) :
{/*@bgen(jjtree) Condition */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token condition = new Token();
}
{/*@bgen(jjtree) Condition */
        try {
/*@egen*/
	(condition = <IDENTIFIER>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		c.setCondition(condition.toString());
		/*System.out.println("Cond: " + condition.toString());*/
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Move(Move m) : 
{/*@bgen(jjtree) Move */
        SimpleNode jjtn000 = new SimpleNode(JJTMOVE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token move = new Token();
	Token move1 = new Token();
	Token move2 = new Token();
	boolean choice;			
}
{/*@bgen(jjtree) Move */
        try {
/*@egen*/

	(
		LOOKAHEAD(2)
		(
			<CHOOSE> 
			<LBRACKET> 
				(move1 = <IDENTIFIER>) (move2 = <IDENTIFIER>)
			<RBRACKET>
		)
		{			
  			/*m.setMoveChoices(move1.toString(),move2.toString());
  			System.out.println("setting: " + move1.toString() + " " + move2.toString());
  			System.out.println("after setting: " + m.choice1 + " " + m.choice2);*/
  			choice = true;  			
		}
		|
		(			 
			move = <IDENTIFIER>		
		)
		{
			/*m.setMove(move.toString());
			System.out.println("setting: " + move.toString());  		
			System.out.println("after setting: " + m.type);*/			
			choice = false;
		}
	 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{
		if (choice)
			m.setMoveChoices(move1.toString(),move2.toString());
		else
			m.setMove(move.toString());	
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}


void Attack(Attack a) :
{/*@bgen(jjtree) Attack */
        SimpleNode jjtn000 = new SimpleNode(JJTATTACK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token attack = new Token();
	Token attack1 = new Token();
	Token attack2 = new Token();		
}
{/*@bgen(jjtree) Attack */
        try {
/*@egen*/
	(
		LOOKAHEAD(2)
		(
			<CHOOSE> 
			<LBRACKET> 
				(attack1 = <IDENTIFIER>) (attack2 = <IDENTIFIER>)
			<RBRACKET>
		)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  
		{			
  			a.setAttackChoices(attack1.toString(),attack2.toString());
  			/*System.out.println("setting: " +  attack1.toString() + " " + attack2.toString());*/  			
		}
		|
		(			 
			attack = <IDENTIFIER>		
		)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/	
		{
			a.setAttack(attack.toString());
			/*System.out.println("setting: " + attack.toString());*/  		
		}
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
	
}
