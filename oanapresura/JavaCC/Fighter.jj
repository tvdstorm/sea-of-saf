options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Fighter)

public class Fighter {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Fighter parser = new Fighter(System.in);
    parser.Input();
  }

}

PARSER_END(Fighter)

TOKEN :
{
	<NUM: ( ["1"-"9"] )> | 
	<LBRACE: "{"> | 
	<RBRACE: "}"> |
	<LPARAN: "["> | 
	<RPARAN: "]">   
	<NAME: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}

/** Root production. */

void Move() :
{}
{
	"jump" | "crouch" | "stand" | "run_towards" | "run_away" | "walk_towards" | "walk_away" "\n"
}

void Strength() :
{}
{
	"punch_Reach" | "kick_Reach" | "kick_Power" | "punch_Power" (" ")* "=" (" ")* <NUM> "\n"
}

void Attack() :
{}
{
	"punch_Low" | "punch_High" | "kick_Low" | "kick_High" | "block_Low" | "block_High" "\n"
}
void Condition() :
{}
{
	"stronger" | "weaker" | "much_Stronger" | "much_Weaker" | "even" | "near" | "far" | "always"
}

void ConditionalSpec() :
{}
{
	Condition() (" ")* <LPARAN> (" ")* ( Condition() " ")+ (" ")* <RPARAN> "\n"
}

void Input() :
{}
{
	<NAME> ("\n")? <LBRACE> ("\n")?
	Strength() "\n" Strength() "\n" Strength() "\n" Strength() "\n" 
	( ConditionalSpec() )+ ("\n")? <RBRACE>
}