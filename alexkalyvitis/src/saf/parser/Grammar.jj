/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*/options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Saf)

package saf.parser;

import java.util.ArrayList;
import java.io.FileInputStream;
import java.io.InputStream;

import saf.interpreter.SafInterpreter;
import saf.ast.*;

public class Saf/*@bgen(jjtree)*/implements SafTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSafState jjtree = new JJTSafState();

/*@egen*/   
	public static void main(String args[])
	{
	    try
	    {
	        String path  = new java.io.File(".").getCanonicalPath();
			String safFile = "fighters.saf";

	        InputStream stream = new FileInputStream(path + "/src/saf/fighters/" + safFile);

	        Saf parser = new Saf(stream);

	        System.out.println("Parsing...");

			ArrayList<Fighter> fighters = parser.Parse(); // Parse
			System.out.println("Parsing Succeeded");

			System.out.println("Interpreting...");

			SafInterpreter interpreter = new SafInterpreter(fighters);
			if (interpreter.interpret()) {
				System.out.println("Interpreting Succeeded");
			} else {			    System.out.println("Interpreting Failed");
			}
	    }
	    catch(ParseException e)
	    {
	        System.out.println("Parsing Failed");
	        e.printStackTrace();
	    }
	    catch(Exception e)
	    {
	        System.out.println("Error");
	        e.printStackTrace();
	    }
	}
}

PARSER_END(Saf)

SKIP : // Whitespace
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   "\r\n"
}

TOKEN :
{
	< ASSIGNMENT : "=" >
|   < CHOOSE : "choose" >
|   < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < PROPERTYVALUE : (["0"-"9"])+ >
|   < OPENPARENTHESIS : "(" >
|   < CLOSEPARENTHESIS : ")" >
|   < OPENCURLYBRACKET : "{" >
|   < CLOSECURLYBRACKET : "}" >
|   < OPENSQAREBRACKET : "[" >
|   < CLOSESQAREBRACKET : "]" >
}

ArrayList<Fighter> Parse() :
{/*@bgen(jjtree) Parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ArrayList<Fighter> fighters = new ArrayList<Fighter>();
	Fighter fighter = new Fighter();
	 
	Token fighterName = new Token();
	Strength fighterStrength = new Strength();
	ArrayList<Behavior> fighterBehaviors = new ArrayList<Behavior>();
}
{/*@bgen(jjtree) Parse */
    try {
/*@egen*/
    (        (fighterName = < IDENTIFIER >) { fighter.setName(fighterName.toString()); }
        (fighterName = < IDENTIFIER >)* { fighter.appendName(fighterName.toString()); }
	    (< OPENCURLYBRACKET >)
		(
		    LOOKAHEAD(2)
		    ( fighterStrength = Strength() ) { fighter.addStrength(fighterStrength); }
		    |
		    ( fighterBehaviors = Behaviors() ) { fighter.addBehaviors(fighterBehaviors); }
		)*
		( <  CLOSECURLYBRACKET >) { fighters.add(fighter); }
	)*
	< EOF >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return fighters; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Strength Strength() :
{/*@bgen(jjtree) Strength */
    SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name = new Token();
    Token value = new Token();
}
{/*@bgen(jjtree) Strength */
    try {
/*@egen*/
    (name = < IDENTIFIER >)
    < ASSIGNMENT >
    (value = < PROPERTYVALUE >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return new Strength(name.toString(),Integer.valueOf(value.toString())); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

ArrayList<Behavior> Behaviors() :
{/*@bgen(jjtree) Behaviors */
    SimpleNode jjtn000 = new SimpleNode(JJTBEHAVIORS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token conditionToken = new Token();

    ArrayList<Move> moves = new ArrayList<Move>();
    ArrayList<Attack> attacks = new ArrayList<Attack>();

    ArrayList<Behavior> behaviors = new ArrayList<Behavior>();
}{/*@bgen(jjtree) Behaviors */
    try {
/*@egen*/
    (conditionToken = < IDENTIFIER >)
    < OPENSQAREBRACKET >
    (moves = Moves())
    (attacks = Attacks())
    < CLOSESQAREBRACKET >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        for(Move move : moves)        {
            for(Attack attack : attacks)
            {
                behaviors.add(new Behavior(new Condition(conditionToken.toString()),move,attack));            }        }
        return behaviors;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

ArrayList<Move> Moves() :
{/*@bgen(jjtree) Moves */
        SimpleNode jjtn000 = new SimpleNode(JJTMOVES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token moveToken = new Token();
	ArrayList<Move> moves = new ArrayList<Move>(); 
}
{/*@bgen(jjtree) Moves */
    try {
/*@egen*/
    (moveToken = < IDENTIFIER >)/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ { moves.add(new Move(moveToken.toString())); return moves; }
    |
    (< CHOOSE >)
    (< OPENPARENTHESIS >)
    (
        (moveToken = < IDENTIFIER >){ moves.add(new Move(moveToken.toString())); }
    )+
    (< CLOSEPARENTHESIS >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return moves; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

ArrayList<Attack> Attacks() :
{/*@bgen(jjtree) Attacks */
    SimpleNode jjtn000 = new SimpleNode(JJTATTACKS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token attackToken = new Token();
    ArrayList<Attack> attacks = new ArrayList<Attack>();}
{/*@bgen(jjtree) Attacks */
    try {
/*@egen*/
    (attackToken = < IDENTIFIER >)/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { attacks.add(new Attack(attackToken.toString())); return attacks; }
    |
    (< CHOOSE >)
    (< OPENPARENTHESIS >)
    (
        (attackToken = < IDENTIFIER >){ attacks.add(new Attack(attackToken.toString())); }
    )+
    (< CLOSEPARENTHESIS >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return attacks; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}




