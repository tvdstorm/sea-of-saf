/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammar.jj */
/*@egen*/options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Saf)

package saf;

public class Saf/*@bgen(jjtree)*/implements SafTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSafState jjtree = new JJTSafState();

/*@egen*/   
	public static void main(String args[])
	{
	    try
	    {
	          Saf parser = new Saf(System.in);
	          SimpleNode tree = parser.Parse();
	          tree.dump("");
	    }
	    catch(Exception e)
	    {
	          e.printStackTrace();
	    }
	}
}

PARSER_END(Saf)

SKIP : // Whitespace
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   "\r\n"
}

TOKEN : // Conditions
{	< STRONGER : "stronger" >
|   < WEAKER : "weaker" >
|   < MSTRONGER : "much_stronger" >
|   < MWEAKER : "much_weaker" >
|   < EVEN : "even" >
|   < NEAR : "near" >
|   < FAR : "far" >
|   < ALWAYS : "always" >
}

TOKEN : // Moves
{
    < JUMP : "jump" >
|   < CROUCH : "crouch" >
|   < STAND : "stand" >
|   < RUNTOWARDS : "run_towards" >
|   < RUNAWAY : "run_away" >
|   < WALKTOWARDS : "walk_towards" >
|   < WALKAWAY : "walk_away" >}

TOKEN : // Attacks
{
    < PUNCHLOW : "punch_low" >
|   < PUNCHHIGH : "punch_high" >
|   < KICKLOW : "kick_low" >
|   < KICKHIGH : "kick_high" >
|   < BLOCKLOW : "block_low" >
|   < BLOCKHIGH : "block_high" >
}

TOKEN : // Strengths 
{
    < PUNCHREACH : "punchReach" >
|   < KICKREACH : "kickReach" >
|   < KICPOWER : "kickPower" >
|   < PUNCHPOWER : "punchPower" >
}

TOKEN :
{
	< EQUALS : "=" >
|   < STRING : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < NUMBER : (["1"-"9"] | "10") >
|   < OPSQBRACKET : "[" >
|   < CLSQBRACKET : "]" >
}

SimpleNode Parse() :
{/*@bgen(jjtree) Parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	(Strength() | Condition())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Strength() :
{/*@bgen(jjtree) Strength */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Strength */
    try {
/*@egen*/
    (< PUNCHREACH > | < KICKREACH > | < KICPOWER > | < PUNCHPOWER >)
    (< EQUALS >)
    (< NUMBER >)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

void Condition() :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    (< STRONGER > | < WEAKER > | < MSTRONGER > | < MWEAKER > | < EVEN > | < NEAR > | < FAR > | < ALWAYS >)
    (< OPSQBRACKET >)
    (< JUMP > | < CROUCH > | < STAND > | < RUNTOWARDS > | < RUNAWAY > | < WALKTOWARDS > | < WALKAWAY >)
    (< PUNCHLOW > | < PUNCHHIGH > | < KICKLOW > | < KICKHIGH > | < BLOCKLOW > | < BLOCKHIGH >)
    (< CLSQBRACKET >)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}




