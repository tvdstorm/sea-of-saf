options {	MULTI=false; /* This is because now all of the nodes will be an instance of a derived class of SimpleNode instead of an instance of SimpleNode */	NODE_PREFIX="";	STATIC=false;//Because multiple files can be parsed now, by making new Parser objects.}PARSER_BEGIN(SAFParser)package parser;import java.util.List;import java.util.ArrayList;import saf.astnodes.*;import saf.astnodes.actions.*;import saf.astnodes.conditions.*;public class SAFParser {}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN:{		< OR: "or" >	|	< AND: "and" >	|   < CHOOSE: "choose" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: (<LETTER> | "_")+ >	|	< NUMBER: (["1" - "9"])+ >	|	< LETTER: ["a"-"z","A"-"Z"] >}/** Root */Fighter Fighter():{	String name = "";	List<Characteristic> chars = new ArrayList<Characteristic>();	Characteristic characteristic = null;	List<Rule> rules = new ArrayList<Rule>();	Rule rule = null;}{	( name = FighterName())	"{"			( LOOKAHEAD(2)				  	(				  	  	rule = Rule()					  	{					  		rules.add(rule);					  	}				  	)				|	(				  		characteristic = Characteristic()						{							chars.add(characteristic);						}					)			)*	"}"	{		return new Fighter(name, chars, rules);	}}Characteristic Characteristic() :{	String item = "";	Integer value = 0; }{	( item = CharacteristicItem() ) "=" ( value = CharacteristicValue() )	{		return new Characteristic(item, value);	}	  }Rule Rule() :{	ICondition condition = null;	IAction action1 = null;	IAction action2 = null;}{	( condition = ConditionTypes() ) "[" ( action1 = ActionTypes() ) ( action2 = ActionTypes() ) "]" 	{		return new Rule(condition, action1, action2);	}}ICondition ConditionTypes() :{	ICondition condition = null;}{	condition = ORConditionType()	{		return condition;	} }/* * AND has a higher priority than OR http://en.wikipedia.org/wiki/Logical_connective * Therefore AND is lower in the AST.*/ICondition ORConditionType():{	ICondition condition1 = null;	ICondition condition2 = null;}{	condition1 = ANDConditionType() ( LOOKAHEAD(2) < OR > condition2 = ORConditionType())*	{		return ((condition2 == null)? condition1: new OrConnective(condition1, condition2));	}}ICondition ANDConditionType():{	ICondition condition1 = null;	ICondition condition2 = null;}{	condition1 = ConditionType() (LOOKAHEAD(2) < AND > condition2 = ANDConditionType())*	{		return ((condition2 == null)?condition1: new AndConnective(condition1, condition2));	}}IAction ActionTypes():{	IAction action = null;}{ 	( action = ActionType() )	{		return action;	}| 	( action = ChooseActionType() )	{		return action;	}}IAction ChooseActionType():{	List<IAction> actions = new ArrayList<IAction>();	IAction action = null;}{	< CHOOSE >	"("	(	  	action = ActionTypes()		{			{				actions.add(action);			}		}	)+	")"	{		return new ChooseComposite(actions);	}	  }IAction ActionType():{	Token t;}{ 	t = < IDENTIFIER >	{		return new saf.astnodes.actions.Simple(t.image);	}}String FighterName():{	Token t;}{    	t = < IDENTIFIER >	{		return t.image;	}}String CharacteristicItem():{	Token t;}{	t = < IDENTIFIER >	{		return t.image;	}}Integer CharacteristicValue():{	Token t;}{	t = < NUMBER >	{		return Integer.parseInt(t.image);	}}ICondition ConditionType():{	Token t;}{	t = < IDENTIFIER >	{		return new saf.astnodes.conditions.Simple(t.image);	}	}