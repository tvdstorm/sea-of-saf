options {	MULTI=false; /* This is because now all of the nodes will be an instance of a derived class of SimpleNode instead of an instance of SimpleNode */	NODE_PREFIX="";}PARSER_BEGIN(SAFParser)//package Parser;import java.io.*;import java.awt.List;import AST.*;import AST.Conditions.*;import AST.Actions.*;import AST.Actions.MoveActions.*;import AST.Actions.FightActions.*;public class SAFParser {	public static void main(String args[]) throws ParseException {		try {			InputStream inputStream = new FileInputStream("N:/SoftwareConstruction/Part1/src/robots.prgm");			SAFParser parser = new SAFParser(inputStream);			//Start parsing the file			Arena arena = parser.Parse();			System.out.println(arena.toString());			inputStream.close();			System.out.println("Succes!");		} catch (Exception e) {			System.out.println("Exception!");			System.out.println(e.getMessage());		}	}}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN: /* AND/OR 's */{		< OR: "or" >	|	< AND: "and" >	|   < CHOOSE: "choose" >}	TOKEN : /* CHARACTERISTICS */{		< MOVEACTIONTYPE: "walk_towards" | "walk_away" | "run_towards" | "run_away" | "jump" | "crouch" | "stand" > 	|   < FIGHTACTIONTYPE: "block_low" | "block_high" | "punch_low" | "punch_high"  | "kick_low" | "kick_high" >	|   < CHARACTERISTICITEM: "kickReach" | "kickPower" | "punchReach" | "punchPower" > 	|   < CONDITIONTYPE: "always" | "near" | "far" | "much_stronger" | "stronger" | "even" | "weaker" | "much_weaker" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: (<LETTER> | "_")+ >	|	< NUMBER: (["1" - "9"])+ >	|	< LETTER: ["a"-"z","A"-"Z"] >}/** Root */Arena Parse():{Arena arena = new Arena(); }{	(Bot(arena))+ <EOF>	{ return arena; }}void Bot(Arena arena):{Bot bot = new Bot();}{	BotName(bot) "{" BotProperties(bot) "}"	{ arena.bots.add(bot); }}void BotProperties(Bot bot):{}{	(BotProperty(bot))*}void BotProperty(Bot bot):{}{  	LOOKAHEAD(2)/* NEEDED because both character and rule start with a identifier!*/		Rule(bot)	| 	Characteristic(bot)}void Characteristic(Bot bot) :{ Characteristic characteristic = new Characteristic(); }{	CharacteristicItem(characteristic) "=" CharacteristicValue(characteristic)	{ bot.characteristics.add(characteristic); }	  }void Rule(Bot bot) :{ Rule rule = new Rule(); }{	ConditionTypes(rule) "[" [ MoveActionTypes(rule) FightActionTypes(rule)] "]"}void ConditionTypes(Rule rule) :{ ICondition condition = null; }{	ConditionType(condition)	{ rule.setCondition(condition); }}/* TODO: Check if the left recursion can be refactored in a different way? */void ANDConditionType(ICondition condition):{ ICondition condition1 = null; ICondition condition2 = null; }{	LOOKAHEAD(2)		ORConditionType(condition1) < AND > ANDConditionType(condition2) { condition = new ANDCondition(condition1, condition2); }	|  	ORConditionType(condition) { ; }/*remove?*/}void ORConditionType(ICondition condition):{ ICondition condition1 = null; ICondition condition2 = null; }{	LOOKAHEAD(2)		ConditionType(condition1) < OR > ORConditionType(condition2) { condition = new ORCondition(condition1, condition2); }	|  	ConditionType(condition) { ; } /*remove?*/}/* * AND has a higher priority than OR http://en.wikipedia.org/wiki/Logical_connective * Therefore AND is lower in the AST.*/void MoveActionTypes(Rule rule):{ IMoveAction moveAction = null; }{ 		ChooseMoveActionType(moveAction)	|	MoveActionType(moveAction)	{ rule.setMoveAction(moveAction); }}void FightActionTypes(Rule rule):{ IFightAction fightAction = null; }{ 		ChooseFightActionType(fightAction)	|	FightActionType(fightAction)	{ rule.setFightAction(fightAction); }}void ChooseMoveActionType(IAction action):{ ChooseAction chooseAction = new ChooseAction(); }{	( < CHOOSE > "(" (PreMoveActionType(chooseAction))+ ")")	{ action = chooseAction; }	  }void ChooseFightActionType(IAction action):{ ChooseAction chooseAction = new ChooseAction(); }{	( < CHOOSE > "(" (PreFightActionType(chooseAction))+ ")")	{ action = chooseAction; }}void PreMoveActionType(ChooseAction chooseAction):{ IAction action = null; }{	MoveActionType(action)	{ chooseAction.addAction(action); }}void PreFightActionType(ChooseAction chooseAction):{ IAction action = null; }{	FightActionType(action)	{ chooseAction.addAction(action); }}void FightActionType(IAction action):{ Token t; }{ 	t = < FIGHTACTIONTYPE >	{ action = new FightActionImpl(t.image); }}void MoveActionType(IAction action):{ Token t; }{ 	t = < MOVEACTIONTYPE >	{ action = new MoveActionImpl(t.image); }}void BotName(Bot bot):{ Token t; }{    	t = < IDENTIFIER >	{ bot.name = t.image; }}void CharacteristicItem(Characteristic characteristic):{ Token t; }{	t = < CHARACTERISTICITEM >	{ characteristic.item = t.image; }}void CharacteristicValue(Characteristic characteristic):{ Token t; }{	t = < NUMBER >	{ characteristic.value = Integer.parseInt(t.image); }}void ConditionType(ICondition condition):{ Token t; }{	t = < CONDITIONTYPE >	{ condition = new ConditionImpl(t.image); }	}