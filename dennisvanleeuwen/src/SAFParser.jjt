options {	MULTI=false; /* This is because now all of the nodes will be an instance of a derived class of SimpleNode instead of an instance of SimpleNode */	NODE_PREFIX="";}PARSER_BEGIN(SAFParser)//package Parser;import java.io.*;import java.awt.List;import ast.*;import ast.conditions.*;import ast.actions.*;import ast.actions.moveActions.*;import ast.actions.fightActions.*;public class SAFParser {	public static void main(String args[]) throws ParseException {		Arena arena = null;		try {			InputStream inputStream = new FileInputStream("N:/SoftwareConstruction/Part1/src/robots.prgm");			SAFParser parser = new SAFParser(inputStream);			//Start parsing the file			arena = parser.Parse();			System.out.println(arena.toString());			inputStream.close();			System.out.println("Succes!");		} catch (Exception e) {			System.out.println("Exception during parsing: " + e.getMessage());		}		try{			ASTChecker astChecker = new ASTChecker();			astChecker.check(arena);		}		catch(Exception e){			System.out.println("Exception during type checking the AST: " + e.getMessage());		}	}}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN: /* AND/OR 's */{		< OR: "or" >	|	< AND: "and" >	|   < CHOOSE: "choose" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: (<LETTER> | "_")+ >	|	< NUMBER: (["1" - "9"])+ >	|	< LETTER: ["a"-"z","A"-"Z"] >}/** Root */Arena Parse():{Arena arena = new Arena(); }{	(Bot(arena))+ <EOF>	{ return arena; }}void Bot(Arena arena):{Bot bot = new Bot();}{	BotName(bot) "{" BotProperties(bot) "}"	{ arena.bots.add(bot); }}void BotProperties(Bot bot):{}{	(BotProperty(bot))*}void BotProperty(Bot bot):{}{  	LOOKAHEAD(2)/* NEEDED because both character and rule start with a identifier!*/		Rule(bot)	|	Characteristic(bot)}void Characteristic(Bot bot) :{ Characteristic characteristic = new Characteristic(); }{	CharacteristicItem(characteristic) "=" CharacteristicValue(characteristic)	{ bot.addCharacteristic(characteristic); }	  }void Rule(Bot bot) :{ Rule rule = new Rule(); }{	ConditionTypes(rule) "[" MoveActionTypes(rule) FightActionTypes(rule) "]" 	{ bot.addRule(rule);}}void ConditionTypes(Rule rule) :{ ICondition condition = null; }{	condition = ANDConditionType()	{ rule.setCondition(condition); } }ICondition ANDConditionType():{ ICondition condition1 = null; ICondition condition2 = null; }{	LOOKAHEAD(2)		condition1 = ORConditionType() < AND > condition2 = ANDConditionType()		{ return new ANDCondition(condition1, condition2); }	|  	condition1 = ORConditionType()		{ return condition1; }}ICondition ORConditionType():{ ICondition condition1 = null; ICondition condition2 = null; }{	LOOKAHEAD(2)		condition1 = ConditionType() < OR > condition2 = ORConditionType()		{ return new ORCondition(condition1, condition2); }	|  	condition1 = ConditionType()		{ return condition1; }}/* * AND has a higher priority than OR http://en.wikipedia.org/wiki/Logical_connective * Therefore AND is lower in the AST.*/void MoveActionTypes(Rule rule):{ IAction moveAction = null; }{ 		moveAction = MoveActionType()		{ rule.setMoveAction(moveAction); }	| 	moveAction = ChooseMoveActionType()		{ rule.setMoveAction(moveAction); }}void FightActionTypes(Rule rule):{ IAction fightAction = null; }{ 		fightAction = FightActionType()		{ rule.setFightAction(fightAction); }	| 	fightAction = ChooseFightActionType()		{ rule.setFightAction(fightAction); }}IAction ChooseMoveActionType():{ ChooseAction chooseAction = new ChooseAction(); }{	( < CHOOSE > "(" (PreMoveActionType(chooseAction))+ ")")	{ return chooseAction; }	  }IAction ChooseFightActionType():{ ChooseAction chooseAction = new ChooseAction(); }{	( < CHOOSE > "(" (PreFightActionType(chooseAction))+ ")")	{ return chooseAction; }}void PreMoveActionType(ChooseAction chooseAction):{ IAction action = null; }{	action = MoveActionType()	{ chooseAction.addAction(action); }}void PreFightActionType(ChooseAction chooseAction):{ IAction action = null; }{	action = FightActionType()	{ chooseAction.addAction(action); }}IAction FightActionType():{ Token t; }{ 	t = < IDENTIFIER >	{ return new FightActionImpl(t.image); }}IAction MoveActionType():{ Token t; }{ 	t = < IDENTIFIER >	{  return new MoveActionImpl(t.image); }}void BotName(Bot bot):{ Token t; }{    	t = < IDENTIFIER >	{ bot.setName(t.image); }}void CharacteristicItem(Characteristic characteristic):{ Token t; }{	t = < IDENTIFIER >	{ characteristic.item = t.image; }}void CharacteristicValue(Characteristic characteristic):{ Token t; }{	t = < NUMBER >	{ characteristic.value = Integer.parseInt(t.image); }}ICondition ConditionType():{ Token t; }{	t = < IDENTIFIER >	{ return new ConditionImpl(t.image); }	}