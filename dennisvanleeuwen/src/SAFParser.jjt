options {  MULTI=true;  KEEP_LINE_COLUMN = false;  VISITOR (default: false)  }PARSER_BEGIN(SAFParser)import java.io.*;/** Simple brace matcher. */public class SAFParser {	/** Main entry point. */	public static void main(String args[]) throws ParseException {		try {			InputStream inputStream = new FileInputStream("N:/SoftwareConstruction/Part1/src/robots.prgm");						SAFParser parser = new SAFParser(inputStream);			SimpleNode n = parser.Bots();			n.dump("");			//System.out.println(n.toString());			inputStream.close();			System.out.println("Succes!");		} catch (Exception e) {			System.out.println("Exception!");			System.out.println(e.getMessage());		}			}	public void VISITOR (default: false)}PARSER_END(SAFParser)SKIP :{		" "	|	"\t"	| 	"\r"	| 	"\n"}TOKEN :{  		< ALWAYS: "always" >	| 	< NEAR: "near" > 	| 	< FAR: "far" >	|	< MUCH_STRONGER: "much_stronger" >	| 	< STRONGER: "stronger" >	| 	< EVEN: "even" >	| 	< WEAKER: "weaker" >	| 	< MUCH_WEAKER: "much_weaker" > }TOKEN :{		< WALK_TOWARDS: "walk_towards" >	|	< WALK_AWAY: "walk_away" >	| 	< RUN_TOWARDS: "run_towards" >	| 	< RUN_AWAY: "run_away" >	| 	< JUMP: "jump" >	| 	< CROUCH: "crouch" >	| 	< STAND: "stand" > }TOKEN :{		< BLOCK_LOW: "block_low" >	| 	< BLOCK_HIGH: "block_high" >	| 	< PUNCH_LOW: "punch_low" >	| 	< PUNCH_HIGH: "punch_high"  >	| 	< KICK_LOW: "kick_low" >	| 	< KICK_HIGH: "kick_high" >}TOKEN : /* IDENTIFIERS */{		< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >	|	< CRAP:	(<LETTER>|<DIGIT>)* >	|	< #LETTER: ["_","a"-"z","A"-"Z"] >	|	< #DIGIT: ["0"-"9"] >}/* OPERATORS */TOKEN :{      < ASGN: "=" >  |   < PLUS: "+" >  |   < MINUS: "-" >  |   < MULT: "*" >  |   < DIV: "/" >}/** Root production. */SimpleNode Bots() :{}{	(Bot())* <EOF>	{ return jjtThis; }}void Bot() :{}{	BotName() MatchedBraces()}void BotName():{}{	< IDENTIFIER >}/** Brace matching production. */void MatchedBraces() :{}{    "{" [ (Characteristic() | Rule())+ ] "}"}void Characteristic() :{}{	< IDENTIFIER > < ASGN > < CRAP >}void Rule() :{}{	ConditionType() "[" [MoveActionType() FightActionType()] "]"}void ConditionType() :{}{	< ALWAYS > |  	< NEAR > |  	< FAR > |  	< MUCH_STRONGER > |  	< STRONGER > |  	< EVEN > |  	< WEAKER > |  	< MUCH_WEAKER >}void MoveActionType() :{}{ 		< WALK_TOWARDS >	|	< WALK_AWAY>	| 	< RUN_TOWARDS>	| 	< RUN_AWAY>	| 	< JUMP>	| 	< CROUCH>	| 	< STAND >}void FightActionType():{}{		< BLOCK_LOW >	| 	< BLOCK_HIGH >	| 	< PUNCH_LOW >	| 	< PUNCH_HIGH >	| 	< KICK_LOW >	| 	< KICK_HIGH >}