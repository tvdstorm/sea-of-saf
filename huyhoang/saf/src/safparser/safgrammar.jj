options{	JDK_VERSION = "1.5";	static = false;	LOOKAHEAD = 10;}PARSER_BEGIN(safgrammar)package safparser;import AST.*;import java.util.*;public class safgrammar {	protected ASTManager ast;	public static void main(String args [])	{ 	    System.out.println("Reading from standard input...");	    System.out.print("Enter a SAF specification: ");		safgrammar parser = new safgrammar(System.in);		parser.Initialize();	    try	    {	      parser.Root();	      System.out.println(parser.ast.toString());	    }	    catch (Exception e)	    {	      System.out.println("Oops.");	      System.out.println(e);		}	}  	protected void Initialize()	{		ast = new ASTManager();	}}PARSER_END(safgrammar)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{ 	< CONNECTIVE : "and" | "or" >}TOKEN :{  < INTEGER_LITERAL : (["0"-"9"])+ >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void Root() :{}{	< IDENTIFIER > "{"		(AssignmentStatement())*		(IfStatement())*	"}"}void AssignmentStatement() :{	Token identifier;	Token integerLiteral;}{  	identifier = < IDENTIFIER >  	"="  	integerLiteral = < INTEGER_LITERAL >	{		AssignmentStatement assignment = new AssignmentStatement(identifier.image, Integer.parseInt(integerLiteral.image));		ast.getStatements().add(assignment);	}}void IfStatement() :{  	Token identifier;  	Object expression;  	Function functionCall1;  	Function functionCall2;}{  	expression = LogicalExpr2()  	"["  		functionCall1 = FunctionCall()  		functionCall2 = FunctionCall()  	"]"  	{		List<Statement> listOfStatements = new ArrayList<Statement>();		listOfStatements.add( functionCall1 );		listOfStatements.add( functionCall2 );		IfStatement anIfStatement = new IfStatement(expression, listOfStatements);		ast.getStatements().add(anIfStatement);  	}}Object LogicalExpr2() :{	Object leftExpr;	Object rightExpr;	Token identifier;}{  	// ( expr ) c expr	"("	leftExpr	= LogicalExpr2()	")"	< CONNECTIVE >	rightExpr	= LogicalExpr2()	{	  	return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator, leftExpr, rightExpr );	}	|	// ( expr c expr )  	"("  	leftExpr	= LogicalExpr2()  	< CONNECTIVE >  	rightExpr	= LogicalExpr2()  	")"	{	  	return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator, leftExpr, rightExpr );	}	|	// ( expr )  	"("  	leftExpr	= LogicalExpr2()  	")"  	{		return leftExpr;  	} 	| 	// i c expr	identifier	= < IDENTIFIER >	< CONNECTIVE >	rightExpr	= LogicalExpr2()  	{  	  	BoolExpression boolExpr = new BoolExpression(BoolExpression.ComparisonOperators.equalsOperator,  	  												 new Variable(identifier.image),  	  												 true);		return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator, boolExpr, rightExpr );  	} 	|  	identifier	= < IDENTIFIER >  	{  	  return new BoolExpression(BoolExpression.ComparisonOperators.equalsOperator,  	  							new Variable(identifier.image),  	  							true);  	}}Object LogicalExpr() :{  	Object expr, rightExpr;  	Token connective = null;  	Token identifier = null;  	Token identifier2 = null;}{	"("	expr		= LogicalExpr()	")"	connective	= < CONNECTIVE >	"("	rightExpr	= LogicalExpr()	")"	{		BoolExpression leftExpr = new BoolExpression(	BoolExpression.ComparisonOperators.equalsOperator,														new Variable( identifier.image ), true );		return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator, leftExpr, rightExpr );	}	| 	"("	expr = LogicalExpr()	")"	{	  	return expr;	}	| 	"("  	expr		= LogicalExpr() 	connective	= < CONNECTIVE > 	rightExpr	= LogicalExpr() 	")"	{		BoolExpression leftExpr = new BoolExpression(	BoolExpression.ComparisonOperators.equalsOperator,														new Variable( identifier.image ), true );		return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator, leftExpr, rightExpr );	}	|	identifier = < IDENTIFIER >	connective	= < CONNECTIVE >	identifier2 = < IDENTIFIER >	{	  	return new LogicalExpression( LogicalExpression.ConditionalOperators.AndOperator,									  new BoolExpression(	BoolExpression.ComparisonOperators.equalsOperator,															new Variable( identifier.image ), true ) ,									  new BoolExpression(	BoolExpression.ComparisonOperators.equalsOperator,															new Variable( identifier2.image ), true ) );	}	identifier = < IDENTIFIER >	{		return new BoolExpression(	BoolExpression.ComparisonOperators.equalsOperator,									new Variable( identifier.image ), true );	}}Function FunctionCall() :{  	Token identifier;  	Token parameter1 = null;  	Token parameter2 = null;}{  	identifier = < IDENTIFIER >  	"("		parameter1 = < IDENTIFIER >		parameter2 = < IDENTIFIER >  	")"  	{		Function function = new Function(identifier.image);		if (parameter1 != null) function.AddParameter( new Variable(parameter1.image, parameter1.image) );		if (parameter2 != null) function.AddParameter( new Variable(parameter2.image, parameter2.image) );		return function;  	} 	| 	identifier = < IDENTIFIER >  	{		Function function = new Function(identifier.image);		return function;  	}}